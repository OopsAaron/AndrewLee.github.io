<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>思建的NLP之旅</title>
  
  <subtitle>沉淀自己</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-31T14:43:45.049Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>李思建</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020-08-31-一周论文分享（第1期）</title>
    <link href="http://yoursite.com/2020/08/31/2020-08-31-%E4%B8%80%E5%91%A8%E8%AE%BA%E6%96%87%E5%88%86%E4%BA%AB%EF%BC%88%E7%AC%AC1%E6%9C%9F%EF%BC%89/"/>
    <id>http://yoursite.com/2020/08/31/2020-08-31-%E4%B8%80%E5%91%A8%E8%AE%BA%E6%96%87%E5%88%86%E4%BA%AB%EF%BC%88%E7%AC%AC1%E6%9C%9F%EF%BC%89/</id>
    <published>2020-08-31T12:43:16.000Z</published>
    <updated>2020-08-31T14:43:45.049Z</updated>
    
    <content type="html"><![CDATA[<p>记录每周值得分享的论文，周一发布《reformer-the eficient transformer》《Transformer-XL-Attentive Language Models Beyond a Fixed-Length Context》</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      记录每周值得分享的论文，周一发布、
《reformer-the eficient transformer》、
《Transformer-XL-Attentive Language Models Beyond a Fixed-Length Context》

    
    </summary>
    
    
      <category term="论文分享" scheme="http://yoursite.com/categories/%E8%AE%BA%E6%96%87%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="论文" scheme="http://yoursite.com/tags/%E8%AE%BA%E6%96%87/"/>
    
      <category term="论文分享" scheme="http://yoursite.com/tags/%E8%AE%BA%E6%96%87%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>2020-08-31-git进阶</title>
    <link href="http://yoursite.com/2020/08/31/2020-08-31-git%E8%BF%9B%E9%98%B6/"/>
    <id>http://yoursite.com/2020/08/31/2020-08-31-git%E8%BF%9B%E9%98%B6/</id>
    <published>2020-08-31T08:41:49.000Z</published>
    <updated>2020-09-01T06:23:05.922Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>之前总结过git的一些基本命令，后来使用了更多git，写博客用于记录。不断更新 ，在实践中总结git知识点。</p><p>回顾下之前的git基本操作</p><ul><li>将现有的项目添加提交并上传到远程仓库</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git add . #添加当前文件夹下的所有文件</span><br><span class="line"></span><br><span class="line">git commit -m "first commit " # 引号内是本次的提交说明 </span><br><span class="line"></span><br><span class="line">git push -u origin master # 提交本地分支到远程分支</span><br><span class="line">(若出现failed to push som refs to， 则执行git pull origin master，</span><br><span class="line">将远程服务器github上的master拉下来，再重新push)</span><br></pre></td></tr></tbody></table></figure><ul><li>clone代码</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone   https://github.com/raymond-zhao/cat-mall.git   ../Github/cat-mall </span><br><span class="line">#将cat-mall代码克隆到  ../Github/cat-mall 中</span><br></pre></td></tr></tbody></table></figure><h3 id="git-status-和-git-diff">git status 和 git diff</h3><p>在对文件进行修改之后，可以用 <code>git status</code> 查看结果，可以让我们时刻掌握仓库当前的状态</p><p><img src="https://i.loli.net/2020/08/31/fTmxaAeZG1iSCLd.png" alt="image-20200831180231338" style="zoom:67%;"></p><p>可以看到在<code>modified</code>部分，可以看到有四个文件被修改了，<strong>但是还没有进行提交（<code>commit</code>）修改</strong></p><p>而下半部分的<code>untracked files</code>表示的是<strong>之前从未提交到仓库分支</strong>的文件（一个markd文件，一个照片）</p><p>上述只是看到被修改的文件，但如果能看看具体修改了什么内容就好了，<code>git diff</code> 可以实现这个功能</p><p><img src="https://i.loli.net/2020/08/31/nVd3hGKLJy6f7zH.png" alt="image-20200831194816455"></p><p>可以看到修改的详细细节（红色为修改前的内容，绿色为修改后的内容）。向下箭头可以下拉文本，<code>q</code>退出查看 （quit）</p><p>这样就可以放心的添加（add）到仓库的暂存区，并提交（commit）到仓库分支</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m 20/8/31/commit1</span><br></pre></td></tr></tbody></table></figure><h4 id="小结">小结</h4><ul><li>要随时掌握工作区的状态，使用<code>git status</code>命令。</li><li>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</li></ul><h3 id="版本回退">版本回退</h3><p>每当文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为<code>commit</code>。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个<code>commit</code>恢复，然后继续工作，而不是把几个月的工作成果全部丢失。</p><p>在Git中，我们用<code>git log</code>命令查看：</p><p><img src="https://i.loli.net/2020/08/31/4lC7ufP6ZmbUvWT.png" alt="image-20200831233324006" style="zoom:80%;"></p><p><code>git log</code>命令显示从最近到最远的提交日志，每一次<code>commit</code>很详细</p><p>可以加上<code>--pretty=oneline</code>参数，来简化显示。推荐使用</p><p><img src="https://i.loli.net/2020/08/31/xNXAn7Pt8rT2mcE.png" alt="image-20200831233340202" style="zoom:80%;"></p><p>其中前面编号类似<code>012214236e...</code>的是<code>commit id</code>（版本号），是一个<code>SHA1</code>计算出来的一个非常大的数字，用十六进制表示</p><p>每个人的编号不一样，因为Git是分布式的版本控制系统，多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。</p><blockquote><p><a href="https://1024tools.com/hash" target="_blank" rel="noopener">Hash在线计算、md5计算、sha1计算、sha256计算、sha512计算</a></p></blockquote><h4 id="回退到历史版本">回退到历史版本</h4><p>这样我们就可以进行回退操作</p><p>首先，Git必须知道当前版本是哪个版本。</p><p>在Git中，用<code>HEAD</code>表示当前版本，也就是最新的提交<code>012214236e...</code>，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。</p><p>我们可以使用<code>git reset</code>命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^ <span class="comment">#回退到上一版本</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.loli.net/2020/08/31/k37ptdoMJxGcufR.png" alt="image-20200831233416378"></p><p>结果显示出现在是<code>ca41b0a</code>，也就是上一次<code>commit</code>的版本。我们成功回退版本！</p><p>当我们再查看日志的时候，发现已经没有<code>20/8/31/commit1</code>版本了</p><p><img src="https://i.loli.net/2020/08/31/xWIlbtTwazUJNdO.png" alt="image-20200831233446124"></p><hr><h4 id="还原到最新版本">还原到最新版本</h4><p>如果想要再还原到<code>20/8/31/commit1</code>版本呢？</p><p>也是可以的，只要<strong><code>上面的命令行窗口还没有被关掉</code></strong>，就可以顺着往上找，找到那个<code>20/8/31/commit1</code>版本的<code>commit id</code>是<code>012214236e...</code>，于是就可以指定回到未来的某个版本：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 0221423</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.loli.net/2020/08/31/9pK7UsnRrv1loSD.png" alt="image-20200831233507305"></p><p>版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。</p><p>这样就实现了还原到最后<code>commit</code>版本</p><p>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的<code>HEAD</code>指针，当你回退版本的时候，Git仅仅是把HEAD从指向历史版本，再将工作区的文件更新即可</p><p>如果回退到了某个版本，关掉了命令行窗口，后悔想恢复到新版本但是找不到新版本的<code>commit id</code>怎么办？</p><p>在Git中，总是有后悔药可以吃的。Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令：</p><p><img src="https://i.loli.net/2020/09/01/Ly4MDnv6WAEwQlV.png" alt="image-20200901000008019"></p><p>知道<code>commit_id</code>，还原版本就十分滴完美！</p><blockquote><p><strong>注！！！</strong></p><p>如果从历史版本回到最后的版本，也只能还原到最后<code>commit</code>后的版本。</p><p>我才开始<code>commit</code>了版本A，之后又写了一部分内容 B(未<code>commit</code>)。还原到了A-1版本，之后又想还原到A+B版本，操作完之后发现还原后的没有B部分，也就是我只能还原到A。</p><p>原因就是我在最后一次<code>commit</code>就是A，而写完B之后，没有<code>commit</code> ，于是无法还原。 （多多<code>commit</code>，</p><p>，还原需谨慎。我是真的折腾）<span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8">😭</span></p></blockquote><h4 id="小结-1">小结</h4><ul><li><code>HEAD</code>指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。 （commit_id也写成HEAD^）</li><li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</li><li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li></ul><h4 id="参考">参考</h4><blockquote><p><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">常用git命令清单-阮一峰</a></p><p><a href="http://www.ruanyifeng.com/blog/2012/08/how_to_read_diff.html" target="_blank" rel="noopener">读懂diff-阮一峰</a></p><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">git教程-廖雪峰</a></p><p><a href="http://www.runoob.com/git/git-install-setup.html" target="_blank" rel="noopener">git教程-菜鸟教程</a></p><p><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">gitbook</a></p><p><a href="http://gitbook.liuhui998.com/index." target="_blank" rel="noopener">Git Community Book</a></p><p><a href="https://juejin.im/post/6844903586023866375" target="_blank" rel="noopener">从只会git add .的菜鸟到掌握git基本功能</a></p></blockquote><h3 id="工作区和暂存区">工作区和暂存区</h3><h4 id="工作区working-directory">工作区（Working Directory）</h4><p>就是在电脑里能看到的目录，比如我的<code>mynlog</code>文件夹就是一个工作区：</p><p><img src="https://i.loli.net/2020/09/01/lp9hvTzLtVuMPG5.png" alt="image-20200901000937480" style="zoom:80%;"></p><h4 id="版本库repository">版本库（Repository）</h4><p>也就是本地仓库</p><p>工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。（选择<code>隐藏文件可见</code>就可以看到）</p><p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫<code>index</code>）的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p><p><img src="https://i.loli.net/2020/09/01/wBe5iWuajDJKxdV.png" alt="image-20200901001300425" style="zoom:80%;"></p><p><img src="https://i.loli.net/2020/09/01/KywEFn2dtMJeBkq.png" alt="image-20200901001406385" style="zoom:80%;"></p><p>前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：</p><p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区(<code>index</code>)；</p><p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支(<code>master</code>)。</p><p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p><p>你可以简单理解为，<strong>需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</strong> 也就是可以多次<code>git add .</code> ,之后再一次性<code>git commit</code></p><p>我对文件进行修改之后，<code>git status</code> 显示如下：</p><p><img src="https://i.loli.net/2020/09/01/qZ4JcAzCrBOQng5.png" alt="image-20200901003431025"></p><p>这是对文件进行了修改，但是未添加（add）到暂存区和提交（commit）到仓库分支。 并且出现了之前从未提交的文件（四张png图片）</p><p>然后<code>git add .</code>,再查看目前的状态 <code>git status</code></p><p><img src="https://i.loli.net/2020/09/01/leMQO9F83N5DxUq.png" alt="image-20200901003844459"></p><p>出现了绿色的<code>new file</code>字样和<code>modified</code>，代表已添加到缓存区。</p><p>现在，暂存区的状态就变成这样了（原文是添加的readme和LICENSE文件）：</p><p><img src="https://i.loli.net/2020/09/01/MHQiJkB674jcAE5.png" alt="image-20200901003951252"></p><p>所以，<code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（index），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。</p><p><img src="https://i.loli.net/2020/09/01/1uzidT9knarwNMU.png" alt="image-20200901004202394"></p><p>这时候再 <code>git status</code>，则是干净的</p><p>现在版本库变成了这样，暂存区就没有任何内容了：</p><p><img src="https://i.loli.net/2020/09/01/kCXlv3FiurZNbIO.jpg" alt="git-stage-after-commit"></p><h4 id="小结-2">小结</h4><p>了解工作区和暂存区的概念，并通过例子加强<code>git status</code> 、<code>git add</code>、<code>git commit</code>的理解</p><p>如果不用<code>git add</code>到暂存区，那就不会加入到<code>commit</code>中。也就是说<code>commit</code>只会提交暂存区里的内容</p><h3 id="撤销修改">撤销修改</h3><h4 id="在工作区撤销修改">在工作区撤销修改</h4><p>在工作区写的内容想要撤销，当然可以手动删除。同时还有另外的一种方法</p><p><code>git status</code> 查看一下状态</p><p><img src="https://i.loli.net/2020/09/01/qT7BN95PkQeSumd.jpg" alt="img"></p><p>根据git提示，可以知道如下信息：</p><ol type="1"><li><code>changes not staged for commit</code>：表示没有更改添加到暂存区，也就是对于当前的修改还没有进行<code>add</code>操作</li></ol><p><img src="https://i.loli.net/2020/09/01/NfZ2vXuB4etLHxF.jpg" alt="img"></p><ol start="2" type="1"><li><p>可以看到修改的部分是<code>2020-08-31-git 进阶.md</code>文件，不能显示中文，所以用编码表示</p></li><li><p>同时<code>next</code>文件也做了修改。这个每次都有提示，猜想应该是因为next是我<code>clone</code>下来的文件，所以存在<code>.git</code>文件，将<code>.git</code>文件删除就ok了</p></li><li><p>提示显示，<code>git checkout -- file</code>可以丢弃工作区（work directory）的修改</p></li></ol><h5 id="git-checkout----file">git checkout -- file</h5><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- <span class="built_in">source</span>/_posts/2020-08-31-git进阶.md （注意--不要遗漏，同时后面有一个空格）</span><br><span class="line"><span class="comment"># git checkout -- .  这种写法也是可以的，表示全部撤销</span></span><br></pre></td></tr></tbody></table></figure><p>命令<code>git checkout -- filename</code>意思就是，把<code>filename</code>文件在工作区的修改全部撤销，这里有两种情况：</p><ul><li>一种是文件自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</li><li>一种是文件已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</li></ul><p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p><p><code>git checkout</code>其实是<strong>用版本库里的版本替换工作区的版本</strong>，无论工作区是修改还是删除，都可以“一键还原”。</p><h5 id="注">注</h5><ul><li>文件必须写当前git bash 下的完整路径，可以参考<code>git status</code>下的modified部分路径名称，如上的<code>source/_posts/</code></li><li>文件名必须写中文（就是正常的文件名），不能按照modified部分的编码后的名称</li></ul><p><img src="https://i.loli.net/2020/09/01/2l6Nxsh14bdpAY8.jpg" alt="img"></p><p>这是错误过程，可以看到最后一次没有提示，表示成功撤销修改</p><p>打开git进阶文件可以看到内容已经撤销</p><h4 id="添加到暂存区后的撤销">添加到暂存区后的撤销</h4><p>如果在工作区已经修改，并且添加到暂存区了，在<code>commit</code>之前，发现了这个问题。用<code>git status</code>查看一下，修改只是添加到了暂存区，还没有提交：</p><p><img src="https://i.loli.net/2020/09/01/CIASBwaTMEY3Gh1.png" alt="添加到暂存区前"></p><p><img src="https://i.loli.net/2020/09/01/T8jefu37XvFnZMJ.png" alt="添加到暂存区后"></p><ul><li>在添加到暂存区后，可以看到在<code>changes to be committed</code> 部分，添加的部分已经变成绿色，等待被<code>commit</code>提交</li><li>根据git提示，用命令<code>git reset HEAD &lt;file&gt;</code>可以把暂存区的修改撤销掉（<code>unstage</code>），重新放回工作区：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD .</span><br></pre></td></tr></tbody></table></figure><blockquote><p><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用<code>HEAD</code>时，表示最新的版本。</p></blockquote><p>撤销到工作区的内容可以根据上述内容撤销其修改</p><h4 id="提交到版本库后的撤销">提交到版本库后的撤销</h4><p>前提是<strong>还没有把自己的本地版本库推送到远程</strong>。</p><p>可以利用上述的<code>版本回退</code>功能</p><h4 id="小结-3">小结</h4><ul><li>场景1：当你改乱了<code>工作区</code>某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</li><li>场景2：当你不但改乱了工作区某个文件的内容，还<code>添加到了暂存区</code>时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作，用命令<code>git checkout -- file</code>。</li><li>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考<code>版本回退</code>，不过前提是没有推送到远程库。</li></ul><p>远程</p><p>分支暂时用不到，就没有学习</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      不断更新 ，在实践中总结git知识点。
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>2020-08-30-阅读论文</title>
    <link href="http://yoursite.com/2020/08/30/2020-08-30-%E9%98%85%E8%AF%BB%E8%AE%BA%E6%96%87/"/>
    <id>http://yoursite.com/2020/08/30/2020-08-30-%E9%98%85%E8%AF%BB%E8%AE%BA%E6%96%87/</id>
    <published>2020-08-30T07:11:28.000Z</published>
    <updated>2020-08-30T07:23:36.441Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5ODEzMjIyMA==&amp;mid=2247501483&amp;idx=1&amp;sn=9b21f8e62fa2b4b33045900a1e721d30&amp;chksm=9094cf38a7e3462ed5901bd8b0b8ebf99a892b31d75aa6eaf8b3c8cc7698b1d708fd0891ab3e&amp;mpshare=1&amp;scene=1&amp;srcid=08304BRBOlTyXb4qDBM5SGTj&amp;sharer_sharetime=1598771438122&amp;sharer_shareid=2c9f868695c34cf5ff5f7a42eab3d2ed&amp;key=9b9af4fa8e2c96d71311b901f9c755ada338c70880cf596dfe4bc2b5ca69cfb094a0a310cf713fb50591ef0933e5f438e73110d797ab7406eeefa5dd5f4c460076a3e94537447c235df683c3eb24a048c7472ad2cdef063ec759505ebb6902987eb9a08ca55be656525ace69f39c8cdbedf7f2b71fa3d2c7c2c4b0dd2e660589&amp;ascene=1&amp;uin=ODEyNzQwMTM5&amp;devicetype=Windows+10+x64&amp;version=62090529&amp;lang=zh_CN&amp;exportkey=A4y9BBn%2B1GAGlkX0mhK71n0%3D&amp;pass_ticket=tS9Bcx3H%2FQ34yaxv%2F0nHTttU4aZeBoKDlw2k4Zwl5JMpqZkqPjEwcrpqIlAybtka" target="_blank" rel="noopener">沈向阳：读论文的三个层次</a></p><p><a href="https://www.youtube.com/watch?v=Du7qLsToW-o&amp;t=443s" target="_blank" rel="noopener">youtube视频，沈向阳读论文</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      阅读沈向阳教授的《读论文的三个层次》总结
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020-08-29-temp</title>
    <link href="http://yoursite.com/2020/08/29/2020-08-29-temp/"/>
    <id>http://yoursite.com/2020/08/29/2020-08-29-temp/</id>
    <published>2020-08-29T13:01:01.000Z</published>
    <updated>2020-08-30T07:26:05.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="哈希革新transformer这篇iclr高分论文让一块gpu处理64k长度序列">哈希革新Transformer：这篇ICLR高分论文让一块GPU处理64K长度序列</h1><p>Transformer 是近期 NLP 领域里最热门的模型之一，但因为算力消耗过大，对于个人研究者来说一直不太友好。近日一篇入选 ICLR 2020 的<code>研究提出了「Reformer」，把跑 Transformer 模型的硬件要求压缩到了只需一块 GPU，同时效果不变。</code></p><p>大型的 Transformer 往往可以在许多任务上实现 sota，但训练这些模型的成本很高，尤其是在序列较长的时候。在 ICLR 的入选论文中，我们发现了一篇由谷歌和伯克利研究者发表的优质论文。文章介绍了两种提高 Transformer 效率的技术，<code>**最终的 Reformer 模型和 Transformer 模型在性能上表现相似，并且在长序列中拥有更高的存储效率和更快的速度**</code>。论文最终获得了「8，8，6」的高分。</p><p><img src="E:\myBlog\source_posts\image.png" alt="img"></p><p>在最开始，文章提出了<code>将点乘注意力（dot-product attention）替换为一个使用局部敏感哈希（locality-sensitive hashing）的点乘注意力，将复杂度从 O(L2 ) 变为 O(L log L)，此处 L 指序列的长度</code>。</p><p>此外，研究者使用<code>可逆残差（reversible residual layers）代替标准残差（standard residuals），这使得存储在训练过程中仅激活一次，而不是 n 次（此处 n 指层数）</code>。最终的 Reformer 模型和 Transformer 模型在性能上表现相同，同时在长序列中拥有更高的存储效率和更快的速度。</p><p>这篇论文在评审过程中收获了「一致通过」，并被认为将产生重大影响，也经过了几位外部评审的详细审查，最终获得了「8，8，6」的高分。</p><ul><li>论文地址：https://openreview.net/forum?id=rkgNKkHtvB</li><li>代码：https://github.com/google/trax/blob/master/trax/models/research/reformer.py</li></ul><p><strong>引言</strong></p><p>Transformer 架构被广泛用于自然语言处理中，并且在许多任务中实现了 sota。为了获得这些结果，研究者不得不开始训练更大的 Transformer 模型。在最大的配置中，参数数量已经超过了 0.5B/层，层数多达 64。</p><p>诸如此类的大型 Transformer 模型频频出现，到底是客观上必须要求如此多的资源，还是仅仅是因为处理效率不够高？</p><p>可以参考下面这些数据：</p><p>0.5B 的参数占据了 2GB 的内存，嵌入大小为 1024、批处理大小为 8 的 64K token 的激活要用 64K×1K×8 = 0.5B 浮点数，需要另外 2GB 的内存。</p><p>如果说每层的内存占用只有这么一些的话，部署 Transformer 会比实际中更容易，但是事情并不是这样的。以上的估计只包括了每层的内存占用情况和输入的激活损失，并没有考虑 Transformer 上的内存占用问题：</p><ul><li>由于激活需要被存储并用于反向传播，有着 N 层的模型的大小比单层大了 N 倍；</li><li>由于中间的全连接层的深度 d_ff 通常远大于注意力激活层的深度 d_model，因此需要占用很大的内存；</li><li>在长度为 L 的序列上的 attention 的计算和时间复杂度是 O(L2)，所以即使是一个有 64K 字符的序列就会耗尽 GPU 的内存。</li></ul><p>研究者提出了一种 Reformer 模型来解决刚才说的那些问题：</p><ul><li>可逆层（Reversible layer），这个东西最早是 Gomez 等人引入的，在整个模型中启用单个副本，所以 N factor 就消失了；</li><li>在前馈层（feed-forward layer）分开激活和分块处理，消除 d_ff factor，节省前馈层的内存；</li><li>基于局部敏感哈希（locality-sensitive hashing，LSH）的近似注意力计算，让注意力层的 O(L2) 因子替代 O(L) 因子，实现在长序列上的操作。</li></ul><h3 id="局部敏感哈希">局部敏感哈希</h3><p><strong>局部敏感哈希的基本思想类似于一种空间域转换思想，LSH算法基于一个假设，如果两个文本在原有的数据空间是相似的，那么分别经过哈希函数转换以后的它们也具有很高的相似度；相反，如果它们本身是不相似的，那么经过转换后它们应仍不具有相似性。</strong></p><p>局部敏感哈希这样的哈希函数可以具有上述的功能，可以保持数据转化前后的相似性</p><p>局部敏感哈希的最大特点就在于保持数据的相似性</p><p>==========</p><p>理解语言、音乐或视频之类<code>序列数据 (Sequential Data) 的任务充满挑战，尤其是当这些数据依赖于时间跨度较广的上下文时。</code></p><p><code>例如，在一个视频中，如果某个人或某个物体在消失很长一段时间后才重新出现，许多模型会忘记它的样子。</code>而在语言领域，长短期记忆 (LSTM) 神经网络会考虑足够多的上下文来执行 逐句翻译 。在这种情况下，上下文窗口 (Context Window) 的范围（即翻译中考虑的数据范围）会涵盖数十到上百个单词。</p><p>最新的 Transformer <a href="https://flashgene.com/archives/tag/模型" target="_blank" rel="noopener">模型</a> 不仅<code>提高了逐句翻译的性能</code>，而且可以用于通过多文档摘要生成完整的 Wikipedia 文章 。<code>由于 Transformer 使用的上下文窗口扩展到了数千个单词，使上述情景得以实现。凭借宽泛的上下文窗口，Transformer 的应用范围从文本扩展到了包括像素、音符在内的其他场景，可以用于生成 音乐 和 图像 。</code></p><p>但是，Transformer 的<code>上下文窗口有限制范围。</code></p><p>Transformer 的强大来源于 <em>注意力</em> (Attention) 机制 ，通过这一机制，Transformer 将上下文窗口内所有可能的单词对纳入考虑，以理解它们之间的联系。因此，如果文本包含 10 万个单词，Transformer 将需要评估 100 亿单词对（10 万 x 10 万），这显然不切实际。</p><p>另一个实践问题是 <code>如何保存每个模型层的输出</code> 。对于使用大型上下文窗口的应用来说，存储多个模型层输出的内存需求会迅速变得过大（从几层模型层的数 G 级别到 <a href="https://mp.weixin.qq.com/s?__biz=MzAwODY4OTk2Mg==&amp;mid=2652051496&amp;idx=1&amp;sn=d15b291b45dc090187bcb0714f76a65b&amp;chksm=808cb86db7fb317b0e26802cb0929e9e8462357f7c0d786471e15131d735c94adb881bfbe47d&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">数千层</a> 模型层的数 T 级别）。<code>这意味着，实际使用大量层的 Transformer 模型只能用于生成几小段落的文本或一小段的音乐。</code></p><p>今天，我们推出了 <a href="https://flashgene.com/archives/tag/reformer" target="_blank" rel="noopener">Reformer</a> ，一个设计为处理多达 100 万单词的上下文窗口的 Transformer 模型，所有工作在单个加速器上进行且仅使用 16 GB 内存。<code>此模型将综合运用两种关键技术来解决 Transformer 在长上下文窗口的注意力和内存分配问题的应用限制</code>。<a href="https://flashgene.com/archives/tag/reformer" target="_blank" rel="noopener">Reformer</a> <code>使用局部敏感哈希 (Locality-Sensitive-Hashing, LSH) 来降低长序列的处理复杂度和 可逆残差层 ，从而更有效地使用可用内存。</code></p><h4 id="注意力问题">注意力问题</h4><p>将 Transformer 模型应用于宽范围的文本序列时，第一个挑战是如何处理注意力层。</p><p>局部敏感哈希的挑战在于通过计算向量匹配哈希函数，而不是搜索所有可能的向量。例如，在翻译任务中，来自网络首层的每个向量表示一个单词（甚至是后续层中更大量的上下文），而不同语言中相同单词的向量可获得相同的哈希值。</p><p>在下图中，不同的颜色表示不同的哈希值，相似的词则具有相同的颜色。分配哈希值后，序列重新排列，将具有相同哈希值的元素放在一起，再分为多个片段（或多个区块）以实现并行处理。然后在这些短得多的区块（及其相近邻块以覆盖溢出）内应用注意力，从而大大降低计算负载。</p><p><img src="E:\myBlog\source_posts\image-20200829223953263.png" alt="image-20200829223953263"></p><p>局部敏感哈希：Reformer 接收 Key 的序列，其中每个键值代表首层中每个单词（在图像的情况下为像素）和后续层中大量的上下文向量。将局部敏感哈希应用到序列之后，依照键值的哈希值对其排序并分块。注意力仅针对于单个区块及其直接邻块</p><h4 id="内存问题">内存问题</h4><p>虽然局部敏感哈希解决了注意力问题，但仍然存在内存问题。</p><p><code>一个单层的网络一般需要多达几 GB 的内存以及单个 GPU，因此，单层能够执行长序列的单模型。但是，当使用梯度下降训练多层模型时，由于需要保存每一层的激活（函数），以用于执行逆推。一个传统的 Transformer 模型具有十几个或更多的层，通过缓存这些层的值，内存将会很快用完。</code></p><p>第二种 Reformer 中实现的新方法是在反向传播期 (Back-Propagation) 间，按需重新计算每个层的输入，而不是将其保存在内存中。这是使用 可逆层 来实现的，其中来自网络最后一层的激活 (Activation) 用于还原来自任何中间层的激活 (Activation)，这相当于反向运行网络。</p><p>在典型的残差网络中，通过网络传递的输入将会向堆栈中的每一层不断添加至向量。相反，可逆层中每个层有两组激活。一组遵循刚才描述的标准过程，从一层逐步更新到下一层，但是另一组仅捕获第一层的变更。因此，若要反向运行网络，只需简单地减去每一层应用的激活。</p><p><img src="E:\myBlog\source_posts\image-20200829225435706.png" alt="image-20200829225435706"></p><p>可逆层：（图 a）在标准残差网络中，每一层的激活用于将输入更新到下一层。（图 b）在可逆网络中，将会维持两组激活，只有其中一组逐层更新。（图 c）这种方法可使网络反向运行，以还原所有中间值</p><h4 id="reformer-的应用">Reformer 的应用</h4><p><code>这两种新方法能让 Reformer 具有更高的效率，可以在仅有 16GB 内存的单个加速器上处理长达一百万个单词的文本序列。正因为 Reformer 的高效率，可以被直接应用于上下文窗口远大于任何最新 (SOTA) 文本域数据集的数据。借助 Reformer 能处理如此大规模数据集的能力，可促进社区创建大规模数据集的速度。</code></p><p>在不缺乏大规模上下文数据的领域中，我们选择图像生成作为我们实验 Reformer 的对象。在这份 Colab 笔记 [1] 中，我们提供了一些示例，说明如何使用 Reformer 将部分图像变得“完整”。从下图上行所示的图像片段开始，Reformer 可以逐像素生成全画幅图像（下行）。</p><p>========</p><h2 id="the-reformer">The Reformer</h2><p>"Reformer: The Efficient Transformer"的作者采用了<code>一种完全不同的方法来处理序列长度问题</code>。首先，他们观察到学习不同的keys和queries的投影并不是严格必要的。<code>他们丢弃了query投影，并将注意力权重替换为key的函数。</code></p><p>现在，注意力块不再包含queries的单独投影，我们只有key和value对。然而，<code>计算key的协同矩阵(通过将每个key与其他key进行比较)仍然是非常昂贵的。</code></p><p>不幸的是我们可能并没有利用好所有的这些计算。softmax的输出通常由几个关键元素控制 — 其余的往往在噪声中消失。<code>我们在计算softmax的时候，并不一定需要那些注意力权重很小的token。</code></p><p>在编写传统软件时，我们总是会遇到这个问题。如果我们<code>想找到与给定key对应的value，我们通常不会遍历所有key的列表并检查每个key是否匹配。</code>相反，我们使用散列映射数据结构来执行O(1)的查找，而不是O(n)比较。</p><p>方便的是，<code>向量空间的哈希映射确实存在类似的情况，它被称为“局部敏感哈希”(LSH)。正是基于这种方法，Reformer的论文的作者们希望产生一个transformer的替代方案，以避免使用点积注意力的平方复杂性。</code></p><h2 id="局部敏感哈希-lsh">局部敏感哈希 (LSH)</h2><p>局部敏感哈希是一组将高维向量映射到一组离散值(桶/集群)的方法。它最常用来作为近似最近邻搜索的一种方法，用于近似的重复检测或视觉搜索等应用。</p><p>局部敏感哈希方法尝试将高维空间中相近的向量以高概率分配到相同的哈希。<code>有效的哈希函数有很多种，最简单的可能是随机投影。</code></p><p>换句话说，我们选择一个随机的向量集合，观察输入向量在每个向量上的投影是正的还是负的，然后使用这个二值向量来表示给定向量的预期存储区。下图说明了LSH投影矩阵“u”中单个向量的处理过程。绿色的正号表示与向量u点积为正的点，而红色的负号表示与向量u点积为负的点。</p><p><img src="E:\myBlog\source_posts\bVAfX" alt="640.png"></p><h2 id="lsh注意力">LSH注意力</h2><p>Reformer的论文选择了局部敏感哈希的angular变体。<code>它们首先约束每个输入向量的L2范数(即将向量投影到一个单位球面上)，然后应用一系列的旋转，最后找到每个旋转向量所属的切片。</code></p><p><img src="E:\myBlog\source_posts\bVAfZ" alt="640.jpg"></p><p>该图演示了一个用<code>4个桶进行3轮哈希的设置</code>。下面的图中的向量映射到了同一个bucket，因为它们的输入很接近，而上一张图中的向量映射到第一个和最后一个bucket。</p><p><code>在为每个token计算一个桶之后，将根据它们的桶对这些token进行排序，并将标准的点积注意力应用到桶中的token的块上。</code></p><p><img src="E:\myBlog\source_posts\bVAf0" alt="640-1.png"></p><p>有了足够多的桶，这就大大减少了所有的给定的token需要处理的token的数量 —— 在实验中，Reformer的论文运行的模型被配置为使用128块大小的块。因此，LSH操作将昂贵的key协同矩阵乘法的上下文大小限制为更易于管理的值。</p><p><code>我们现在的时间复杂度为O (L*log(L)) ，而不是时间复杂度成正比O (L²)， 这允许我们把注意力操作扩展到更长的序列的时候不会由于运行时间而受到影响。</code></p><p><code>因为这个分桶过程是随机的，所以Reformer有选择地多次运行这个过程，以减少两个在输入空间很近的向量被随机地放在不同的桶中的可能性。当所有的事情都做了之后，你就有了一个完全替代标准的多头注意力的方法</code>，它可以与计算完整的注意力矩阵相媲美。</p><h2 id="内存复杂度">内存复杂度</h2><p>不幸的是，实现更好的时间复杂度只是问题的一半。<code>如果我们将新的LSH注意力块替换为标准的多头注意力，并尝试输入新长度的信息，我们将很快认识到系统中的下一个瓶颈 — 内存复杂性。</code></p><p>即使我们已经非常小心地最小化了注意力操作的计算复杂度，<code>我们仍然必须将所有的key和value存储在内存中，更糟糕的是，在训练期间，我们需要缓存激活以计算参数更新。</code></p><p><code>Reformer论文使用了序列长度为64k的enwiki8语言建模数据集来做实验，隐藏单元的大小为1024，层数为12层，这意味着存储key和value需要2 * 64000 * 1024 * 12 = ~ 1.5B个浮点数，大约是6GB的内存。使用这种内存使用方式，我们将无法在训练期间使用大的批处理大小，从而影响我们的运行时间。</code></p><p>一个选择是实现gradient checkpoint来帮助限制我们的内存使用。允许我们减少内存使用，只存储从正向传递中的关键的激活，剩余的在反向传递中重新计算。因此，我们可以选择只在key和value投影之前存储隐藏状态，而不是存储key和value，然后第二次重新投影隐藏状态来计算梯度。</p><p>不幸的是，这使我们的后向传递的成本增加了一倍，因此我们能够支持更大的批处理大小所获得的好处将通过重新计算得到部分缓解。更重要的是，即使我们选择只存储输入的一小部分，存储单个层的激活需要250MB的空间，这意味着我们很难在12GB的GPU上支持超过12个样本的批处理大小。</p><h2 id="revnets">Re<strong>vN</strong>ets</h2><p>幸运的是，我们还有其他方法来减少内存使用。RevNet。</p><p>RevNets有个非常聪明的计算技巧，<code>通过以一种特定的方式构造每一层，使内存使用与网络深度保持一致。每一层分为两个部分，X₁和X₂</code>，前向计算</p><p>可视化一下，看起来就是这样：</p><p><img src="E:\myBlog\source_posts\bVAf1" alt="640-2.png"></p><p>来自RevNet论文的图，图(a)为RevNet的前向，图(b)为相应的反向。</p><p>由于该层的特定结构，我们可以编写一个自定义函数参数更新，这意味着我们不需要缓存任何激活来计算我们的后向传播。类似于使用梯度检查点，我们仍然需要做一些冗余计算。<code>然而，由于每一层的输入（x）都可以很容易地从它的输出（y）中构造出来，我们的内存使用不再随网络中层数的增加而增加。</code></p><p>在实践中，<code>Reformer定义f(x)是LSH注意力块，g (x)是标准的前向块，来自transformer结构。</code></p><p><img src="E:\myBlog\source_posts\bVAf2" alt="640-3.png"></p><p><code>有了RevNet架构，我们只需要在内存中存储单层的激活，就可以在训练期间使用更大的批处理大小！现在我们不再受训练期间激活的内存占用的限制，我们可以利用LSH注意力块改进时间复杂度。</code></p><p>重要的是，语言模型的loss不会因为可逆层结构而降低。</p><p><img src="E:\myBlog\source_posts\bVAf3" alt="640-4.png"></p><p>这些变化实现起来并不容易 —— 很明显Nikita Kitaev, Łukasz Kaiser和Anselm Levskaya付出巨大的努力在平衡时间和内存。</p><p>总的来说，这些变化使得序列长度的扩展成为可能。虽然结果是初步的，但在enwiki8上的实验表明，在语言建模任务上，Reformer可以与它的重量级前辈竞争。</p><p><img src="E:\myBlog\source_posts\bVAf4" alt="640-1.jpg"></p><p>实验结果</p><p>下图是不同的方法在这两个数据集上的表现，可以看到，无论是共享QK还是可逆Transformer，都不会影响效果。</p><p><img src="https://upload-images.jianshu.io/upload_images/17768144-79d4bfe33746f056.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>下图是<code>不同哈希桶数的LSH注意力的表现</code>。显然，<code>数量越多，效果越好，这是因为关注就越精确，同时模型代价就越高。</code></p><p><img src="https:////upload-images.jianshu.io/upload_images/17768144-cc4f71f61863a84b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>最后是<code>Reformer的层数对于性能的影响</code>。下图（左）是Big Reformer随层变化的不同效果，20层依然无压力。而下图（右）是普通注意力和LSH注意力在不同序列长度的速度比较，当序列很长的时候，LSH具有显著的优势。</p><p><img src="https:////upload-images.jianshu.io/upload_images/17768144-2dd73f9b6168d019.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h2 id="总结">总结</h2><hr><p>位置敏感哈希的注意力和可逆层构成了Reformer的蓝图，非常高兴可以看到基于transformer的结构选择去优化和处理长序列的问题，而不是简单的扩展之前的工作。</p><p>===</p><p>Transformer中的注意力计算需要让矩阵Q和K的转置相乘。我们假定它们的形状都是[ batch_size, length, dimension ]，那么如果序列长度有64K，就有得到一个64K*64K的矩阵，显然是不现实的。</p><p>对于局部敏感哈希注意力而言，需要 Q=K，以及 V，它们的 shape 都是 [batch size,length,d_model]，而重点关注的是 QK^T，有着 [batch size,length,length] 的 shape。进一步来说，对于每个 q_i，实际需要关注的是它们在 key 的接近值。例如，如果 K 是 64K，对于每个 q_i，只需要考虑一小部分，如 32 个到 64 个最接近的 keys。</p><p>这样一来就需要找到最近邻的值，这就需要局部敏感哈希（LSH）了，它能够快速在高维空间中找到最近邻。一个局部敏感哈希算法可以将每个向量 x 转换为 hash h(x)，和这个 x 靠近的哈希更有可能有着相同的哈希值，而距离远的则不会。在这里，研究者希望最近的向量最可能得到相同的哈希值，或者 hash-bucket 大小相似的更有可能相同。</p><p>虽然 LSH 提升了时间效率，但仍然存在一个内存的问题。当训练一个具有梯度下降的多层模型时，需要保存每一层的激活值，以便在向后传递中使用。一个典型的 Transformer 模型有 12 个或更多的层，因此，如果用来缓存来自每个层的值，那么内存很快就会用完。</p><p>在 Reformer 中实现的第二个新方法是在反向传播期间按需重新计算每个层的输入，而不是将其存储在内存中。这是通过使用<strong>可逆层</strong>来实现的，其中来自网络的最后一层的激活被用来恢复来自任何中间层的激活，这相当于反向运行网络。在一个典型的残差网络中，栈中的每一层都不断地增加通过网络的向量。相反，可逆层对每个层有两组激活。一个遵循刚才描述的标准过程，并从一个层逐步更新到下一个层，但是另一个只捕获对第一个层的更改。因此，要反向运行网络，只需减去应用于每个层的激活。<img src="E:\myBlog\source_posts\17768144-92afd80bc919cfd1.png" alt="img"></p><p><img src="E:\myBlog\source_posts\17768144-aebc2f755db51a88.png" alt="img"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      杂
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020-08-27-edge还原到旧版本问题</title>
    <link href="http://yoursite.com/2020/08/27/2020-08-27-edge%E8%BF%98%E5%8E%9F%E5%88%B0%E6%97%A7%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/08/27/2020-08-27-edge%E8%BF%98%E5%8E%9F%E5%88%B0%E6%97%A7%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98/</id>
    <published>2020-08-27T02:06:02.000Z</published>
    <updated>2020-08-31T15:10:50.281Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>win10自动更新edge，但是新版的edge用的是Chromium内核，新功能添加不少，也全部支持chrome的插件，但是对pdf的支持不友好，和chrome一个德行<span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f611.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f611.png?v8">😑</span>。导致我在旧版本edge阅读论文时做的笔记在新版edge体验感极差，于是想着回退到旧版本 （edge不就是用来阅读论文的 ）<span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span></p><h3 id="版本回退">版本回退</h3><p>百度后发现将新版本的edge删除，就可以自己回退到旧版本的edge</p><p>geek强制删除新版edge之后，发现原来的一些设置消失了。系统不太稳定，可能是删除了一些系统配置文件。</p><p>为啥？？？</p><p>下次还是少用geek强制删除吧，乖乖在<code>程序与功能</code>中卸载删除吧</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      edge还原到旧版本出现的问题
    
    </summary>
    
    
    
      <category term="故障排除" scheme="http://yoursite.com/tags/%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4/"/>
    
  </entry>
  
  <entry>
    <title>2020-08-25-chrome插件</title>
    <link href="http://yoursite.com/2020/08/25/2020-08-25-chrome%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/2020/08/25/2020-08-25-chrome%E6%8F%92%E4%BB%B6/</id>
    <published>2020-08-25T12:21:35.000Z</published>
    <updated>2020-08-30T07:18:22.441Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载提速"><strong>下载提速</strong></h3><ul><li><h4 id="使用场景"><strong>使用场景</strong></h4></li></ul><p>Chrome的下载速度，有时候确实是慢得可以跟某网盘相媲美了，甚至赶不上某些国产浏览器。</p><p>这是因为，Google为了兼容所有的电脑性能和带宽，在Chrome中采取的是保守<strong>单线程下载机制</strong>，这就导致很多时候下载速度非常慢了。</p><p><img src="https://i.loli.net/2020/08/25/5ZMgPIUfc2YndtE.png" alt="img"></p><p>不过，很多人都不知道的是，Chrome其实也是自带多线程下载功能的。所谓多线程下载，就是可以同时对资源建立多个连接，提升下载速度。</p><p>只是这个功能是默认关闭的，需要用户手动去开启。</p><ul><li><h4 id="使用方法"><strong>使用方法</strong></h4></li></ul><p>在浏览器地址栏输入以下网址并回车：</p><p><strong>chrome://flags/#enable-parallel-downloading</strong></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/D1XlU0QfU3GnNfPmPtO4D3rncDTK3kFcCxQMtjnyMUqI5hTIZydfXEDTnp06YjKEBIbdlnvUoFj3ht3ibXUatiaw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>在Parallel downloading的后面选项里，把「default」改为「Enabled」，并按照提示重启浏览器。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/D1XlU0QfU3GnNfPmPtO4D3rncDTK3kFcYca3x5SEBJpOky2icdUADwP04jUYiaib6WvUQZ9XlSNHdeiach2RMydRGg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>这样就可以开启多线程下载了，经过实际测试，下载速度至少提高了三倍左右（也有可能下载速度飙升一段时间又跌回去）。</p><h3 id="link-to-text-fragment">Link to Text Fragment</h3><p>实际上就是带锚点功能的网页分享工具。</p><p>所谓锚文本，简单来说就像是关键词的定位，将关键字指向指向另一个页面的链接就是锚文本。这个工具则可以让你将网页上选中的文本片段生成为一个锚文本。</p><p><strong>当你点击这个锚文本时，就会直接跳转到该网页对应标记的锚点上了。</strong></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/D1XlU0QfU3FtLAG0sobAP0xrYk6LJk6m3AU0icjVgSjiavYp3msxibjM7D9U6PXFbzm4wUeZ6OkaFibhPXLFeIBLOQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><h4 id="使用方法-1"><strong>使用方法</strong></h4><h5 id="生成锚文本"><strong>生成锚文本</strong></h5><p>鼠标划词选中文本，在右键菜单中选择【Copy Link to Text Fragment】，然后可以看到该文本被黄色标记。</p><p><img src="https://i.loli.net/2020/08/25/ns29PiDENtvJp3R.gif" alt="img"></p><h5 id="打开锚文本"><strong>打开锚文本</strong></h5><p>此时，锚文本已经自动生成并复制到你的剪贴板上，你可以将它发送给需要分享的好友，或者在浏览器中打开，另存为书签。</p><p>可以看到，在浏览器内打开这个锚文本，网页会自动定位到我们做了锚点的文本部分，再也不需要我们自行阅读查找，非常方便。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_gif/D1XlU0QfU3FtLAG0sobAP0xrYk6LJk6m5F5vhCQoN8IeaxDibdMzqk2jFVjhDDhGMJdY3ZHpibCicN5yWbsRoN9Bg/640?wx_fmt=gif&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="img"></p><p>需要注意的是，这个锚文本也<strong>仅限在安装了Link to Text Fragment插件的浏览器上打开</strong>，若没有安装则不会跳转对应位置。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      记录用到的chrome插件
    
    </summary>
    
    
      <category term="chrome" scheme="http://yoursite.com/categories/chrome/"/>
    
    
      <category term="chrome" scheme="http://yoursite.com/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>2020-08-23-google搜索的高效使用</title>
    <link href="http://yoursite.com/2020/08/23/2020-08-23-google%E6%90%9C%E7%B4%A2%E7%9A%84%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/08/23/2020-08-23-google%E6%90%9C%E7%B4%A2%E7%9A%84%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8/</id>
    <published>2020-08-23T09:04:44.000Z</published>
    <updated>2020-08-24T11:51:36.784Z</updated>
    
    <content type="html"><![CDATA[<h3 id="section">“”</h3><p>以整个短语作为搜索关键词，而不是拆开成每个词。</p><p>表示完全匹配，结果中必须出现与搜索文本完全相同的内容。</p><h3 id="a--b">A -B</h3><p>搜索包含A但不包含B的结果（请注意A后面的<strong>空格不能省略</strong>）</p><p><img src="https://i.loli.net/2020/08/23/pjDWIreKGtJU7Oa.png" alt="image-20200823173525379" style="zoom: 67%;"></p><p>当加上 <code>-poweredge</code> 时，就可以屏蔽掉机架式服务器关键字中所有含有poweredge的内容</p><p><img src="https://i.loli.net/2020/08/23/k2vbVtdCMBYzJfQ.png" alt="image-20200823173614387" style="zoom:67%;"></p><h3 id="filetype">filetype</h3><p>搜索对应类型的文件。例如：<code>时间简史 filetype:pdf</code>，即为搜索包含关键字时间简史的pdf文件。（请注意<strong>使用英文的冒号</strong>） （一般不加filetype也可以）</p><p><img src="https://i.loli.net/2020/08/23/UBJHv4YmfiGRhuy.png" alt="image-20200823174000514" style="zoom:67%;"></p><h3 id="site">site</h3><p>在某个网站内搜索，比如：site:<a href="https://link.zhihu.com/?target=http%3A//pan.baidu.com">http://pan.baidu.com</a> 特别好用，用来搜百度云里的资源。再如：</p><p>在我们实验室网站查找<code>招生</code>关键字，则 <code>招生 site:http://www.ubinec.org/</code>，十分便捷。</p><p>（直接招生 site:ubinec.org/ 也可以 ，中间不要加空格 ）</p><p><img src="https://i.loli.net/2020/08/24/aypbHTDAnF79CIi.png" alt="image-20200824160653772" style="zoom:67%;"></p><h3 id="section-1">*</h3><p>很多时候想搜一个东西但是不确定具体名字，可以用星号代替忘了的字，可以代替多个字</p><h3 id="define">define</h3><p><strong>当字典或快速查找意思</strong>，如[define:right]，还能看到单词在书籍中出现频率的年代变化，词源等；</p><p><img src="https://i.loli.net/2020/08/24/skUBwAFtVMm6OWJ.png" alt="image-20200824162755266" style="zoom:67%;"></p><h3 id="section-2">~</h3><p>同时搜索近义词。如搜“higher education” 和 “university”</p><h3 id="or-或逻辑">OR (或)逻辑</h3><p>通过<em>OR</em> 搜索, 可以得到和两个关键词分别相关的结果, 而不仅仅是和两个关键词都同时相关的结果.</p><p><img src="E:\myBlog\source\_posts\image-20200824193744947.png" alt="image-20200824193744947" style="zoom:67%;"></p><p><img src="E:\myBlog\source\_posts\image-20200824193731306.png" alt="image-20200824193731306" style="zoom:67%;"></p><h3 id="限定年份">限定年份</h3><ol type="1"><li>在google工具选项中可以选择时间</li></ol><p><img src="E:\myBlog\source\_posts\image-20200824194504266.png" alt="image-20200824194504266" style="zoom:67%;"></p><ol start="2" type="1"><li><code>世界杯 2010..2014</code></li></ol><h3 id="参考">参考</h3><p><img src="https://i.loli.net/2020/08/24/uqRyUOdYnGJbxHN.jpg" alt="preview"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      高效利用google搜索，记录使用技巧
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020-08-19-期望、方差、协方差及相关系数的基本运算</title>
    <link href="http://yoursite.com/2020/08/19/2020-08-19-%E6%9C%9F%E6%9C%9B%E3%80%81%E6%96%B9%E5%B7%AE%E3%80%81%E5%8D%8F%E6%96%B9%E5%B7%AE%E5%8F%8A%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97/"/>
    <id>http://yoursite.com/2020/08/19/2020-08-19-%E6%9C%9F%E6%9C%9B%E3%80%81%E6%96%B9%E5%B7%AE%E3%80%81%E5%8D%8F%E6%96%B9%E5%B7%AE%E5%8F%8A%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97/</id>
    <published>2020-08-19T12:17:59.000Z</published>
    <updated>2020-08-19T13:21:26.236Z</updated>
    
    <content type="html"><![CDATA[<p>链接</p><p>https://blog.csdn.net/touristman5/article/details/56281887</p><p>https://developer.aliyun.com/article/65262</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;链接&lt;/p&gt;
&lt;p&gt;https://blog.csdn.net/touristman5/article/details/56281887&lt;/p&gt;
&lt;p&gt;https://developer.aliyun.com/article/65262&lt;/p&gt;
&lt;script&gt;
     
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020-08-19-解读卡尔曼滤波[第二部分]</title>
    <link href="http://yoursite.com/2020/08/19/2020-08-19-%E8%A7%A3%E8%AF%BB%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2-%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/"/>
    <id>http://yoursite.com/2020/08/19/2020-08-19-%E8%A7%A3%E8%AF%BB%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2-%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/</id>
    <published>2020-08-19T06:41:38.000Z</published>
    <updated>2020-08-30T07:21:51.102Z</updated>
    
    <content type="html"><![CDATA[<p>在开始之前，我想解释几个基本术语，如方差（variance）、标准差（standard deviation）、估计值（estimate）、准确度（accuracy）、精度（precision）、平均值（mean）和期望值（expected value）。</p><p>我想本教程的许多读者都熟悉基本统计学知识。但是，在本教程的开头，我承诺提供理解卡尔曼滤波器操作所需的必要背景知识。如果您熟悉这个主题，可以跳过它。</p><ul><li><strong>平均值与期望值</strong></li></ul><p>虽然<strong>平均值(mean)</strong>与<strong>期望值（expected value）</strong>是密切相关的术语。但是，它们是不同的。</p><p>例如，假设有五种不同的硬币——两个5美分的硬币和三个10美分的硬币，我们可以通过平均硬币的价值来轻松计算硬币的平均值。</p><p><img src="https://i.loli.net/2020/08/19/JxTbfDa2QOrz4oj.png" alt="image-20200819144207768"></p><p>上述结果不能被定义为期望值，因为系统状态（硬币值）没有被隐藏（想要表达的是确定的，此处没有任何不确定性），我们已经使用了所有的population（所有5枚硬币）来计算平均值。</p><p><strong>译者补充：因为很多同学经常混淆平均值与期望值的概念，因此，我在此特别解释一下。在解释两个概念之前，先说一下“大数法则”。</strong></p><ul><li>先说一下大数法则：</li></ul><p><img src="https://i.loli.net/2020/08/19/cHPovqVb2RFOS3r.jpg" alt="img"></p><ul><li>思考一下为什么会用到期望值？</li></ul><p><img src="https://i.loli.net/2020/08/19/F6K9M4aPrJxgnOS.jpg" alt="img"></p><p><img src="https://i.loli.net/2020/08/19/1QKexZgmNF6STPt.jpg" alt="img"></p><p>期望值也就是每个数*对应的概率值，再求和</p><p><strong>译者补充完毕。</strong></p><p>现在假设同一个人的五个不同的体重测量值：79.8kg，80kg，80.1kg，79.8kg和80.2kg。</p><p>由于秤的随机测量误差，称重测量值不同。 我们不知道准确的重量值是多少，因为它是一个<strong>隐藏变量Hidden Variable</strong>。 但是，我们可以通过平均尺度测量来估计重量。 （准确测量值不可知）</p><p><img src="https://i.loli.net/2020/08/19/PjARubvWoLmEV5U.png" alt="image-20200819145014158"></p><p>估计的结果是体重的期望值。</p><p>平均数经常使用希腊字母：<strong>μ</strong></p><p>期望值使用字母：<strong>E</strong></p><ul><li><strong>方差与标准差</strong></li></ul><p>方差用来度量随机变量与其期望值（即随机变量的期望值）之间的离散程度。</p><p>标准差是方差的平方根。标准差： <img src="https://www.zhihu.com/equation?tex=%5Csigma" alt="[公式]"> ，方差： <img src="https://www.zhihu.com/equation?tex=%5Csigma%5E%7B2%7D" alt="[公式]"></p><p>例如，我们想比较两个高中篮球队的身高。下表提供了两支球队的球员身高及其平均值。</p><p><img src="https://pic4.zhimg.com/80/v2-d6b2fea25722ffe4774167c3ca530177_1440w.png" alt="img"></p><p>如我们所见，两队的平均身高是一样的。现在让我们检查一下高度变化height variance。</p><p>由于方差用来度量随机变量与其期望值（即随机变量的期望值）之间的离散程度，我们想知道数据集偏离其平均值的情况。我们可以通过从每个变量中减去平均值来计算每个变量与平均值之间的距离。</p><p>我们将用x表示高度，用希腊字母μ表示高度的平均值。每个变量与平均值的距离为：</p><p><img src="https://pic1.zhimg.com/80/v2-8aeb370b55ec20c81cd6fb0ea1581a60_1440w.jpg" alt="img"></p><p>下表给出了每个变量与平均值之间的距离。</p><p><img src="https://picb.zhimg.com/80/v2-47a3cbd7c92a22bc2c1b532557d90609_1440w.png" alt="img"></p><p>下表给出了每个变量与平均值的平方距离。</p><p>有些值是负数。为了消除负值影响，让我们将高度与平均值的距离平方：</p><p><img src="https://picb.zhimg.com/80/v2-2bcc387a3d7e0da6267b04936c845c17_1440w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-759cb19ebbc545066259cfefb22237fb_1440w.png" alt="img"></p><p>为了计算数据集的离散程度，我们需要从中找出所有平方距离的平均值：</p><p><img src="https://pic2.zhimg.com/80/v2-0d382cddfdce473dfc744a382782c5ac_1440w.jpg" alt="img"></p><p>A队的方差是：</p><p><img src="https://pic3.zhimg.com/80/v2-9cc05c08921aab36b395d5b42134c911_1440w.png" alt="img"></p><p>B队的方差是：</p><p><img src="https://pic2.zhimg.com/80/v2-2b935f764b16ebf4b3420fd0f25574a5_1440w.png" alt="img"></p><p>我们可以看出，虽然两队的平均值相同，但A队的身高分布值高于B队的身高分布值，这意味着A队在控球员、中锋和后卫等不同位置有不同的球员，而B队球员则技能相差无几。</p><p>方差的单位是平方的；查看标准差更方便。正如我已经提到的，标准差是方差的平方根。</p><p><img src="https://pic1.zhimg.com/80/v2-4e5b9f3338566969fe0523fa06731489_1440w.jpg" alt="img"></p><p>A队运动员身高的标准差为0.12米。</p><p>B队运动员身高的标准差为0.036米。</p><p>进一步的，现在，假设我们要计算所有高中篮球运动员的平均值和方差。这是一项非常艰巨的任务，我们需要收集所有高中运动员的数据。</p><p>但是，我们可以通过选择一个大的数据集并对这个数据集进行计算来估计参与者的平均值和方差。（样本估计全局）</p><p>随机选取的100名选手的数据集足以进行准确的估计。</p><p>然而，当我们<strong>估计方差</strong>时，方差计算公式略有不同。我们不用N因子归一化，而是用N - 1因子归一化:</p><p><img src="https://pic1.zhimg.com/80/v2-9045e0012dc9592019009cca6c64f97f_1440w.jpg" alt="img"></p><p>你可以在以下资源中看到这个方程的数学证明：<a href="https://link.zhihu.com/?target=http%3A//www.visiondummy.com/2014/03/divide-variance-n-1/">http://www.visiondummy.com/2014/03/divide-variance-n-1/</a></p><hr><ul><li><strong>正态分布</strong></li></ul><p>事实证明，许多自然现象服从正态分布。继续以篮球运动员身高为例，如果随机选取运动员，构建大数据集，绘制身高VS.身高（heights vs. heights）的频率曲线图，得到“钟形”曲线，如下图所示:</p><p><img src="https://pic4.zhimg.com/80/v2-ca75549d80903118ac9a6ac08b58debc_1440w.jpg" alt="img"></p><p>正如你所看到的，这条曲线关于平均值（平均值是1.9米）对称。平均值附近值的频率高于远处值的频率。</p><p>高度的标准差等于0.2米。68.26%的值在平均值的一个标准差内。如下图所示，68.26%的值介于1.7米和2.1米之间（绿色区域占曲线下总面积的68.26%）。</p><p><img src="https://pic2.zhimg.com/80/v2-0f51f3a38d61049e8dc5dd18e363c114_1440w.jpg" alt="img"></p><p>95.44%的值在距离平均值的两个标准差内。</p><p>99.74%的值在距离平均值的三个标准差内。</p><p>正态分布，也称为高斯分布（它以数学家Carl Friedrich Gauss的名字命名），由以下方程描述：</p><p><img src="https://pic4.zhimg.com/80/v2-e4aee9ac01b76d9d688929e3d07ae69e_1440w.jpg" alt="img"></p><p>通常，测量误差是正态分布的，因此<code>卡尔曼滤波器设计基于测量误差是正态分布的假设。</code></p><hr><ul><li><strong>估计、准确度与精度</strong></li></ul><p><strong>— 估计（Estimate）：</strong>评估系统的隐藏状态。飞机的真实位置对观察者来说是隐藏的。我们可以用雷达等传感器来估计飞机的位置。采用多传感器和先进的估计跟踪算法（如卡尔曼滤波），可以显著提高估计精度。每一个测量或计算参数都是一个估计值。</p><p><strong>— 准确度（Accuracy）：</strong>表明测量值与真实值的接近程度。</p><p><strong>— 精度（Precision）：</strong>描述同一参数的许多 度量值中有多少可变性。准确度和精度是估算的基础。</p><p>下图说明了准确度和精度。</p><p><img src="https://pic3.zhimg.com/80/v2-7a1dfe3f5186ade70b8937099fb180a8_1440w.jpg" alt="img"></p><p><strong>高精度系统的测量方差较低</strong>（即不确定度/离散程度/变化程度较低），而低精度系统的测量方差较大（即不确定度/离散程度/变化程度较高）。方差是由随机测量误差产生的。</p><p>低精度系统被称为偏差系统，因为它们的测量具有内置的系统误差（偏差）。</p><p>通过<strong>平均或平滑测量</strong>可以显著降低方差的影响。例如，如果我们使用一个具有随机测量误差的温度计来测量温度，我们可以进行多次测量并对测量的值进行平均。由于误差是随机的，所以有些测量值会高于真实值，而另一些测量值会低于真实值。我们做的测量越多，估计就越接近。</p><p>另一方面，如果温度计有偏差，估计将包括一个恒定的系统误差。</p><p>本教程中的所有示例都假定系统是无偏差的。</p><p><img src="E:\myBlog\source_posts\image-20200819194609812.png" alt="image-20200819194609812"></p><p>极小化性能指标： 最优解</p><p><img src="E:\myBlog\source_posts\image-20200819195511498.png" alt="image-20200819195511498"></p><p>J就是选择能够令方差 <img src="https://www.zhihu.com/equation?tex=%5Cfrac%7B1%7D%7Bn%7D%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%7B%28%7BX_%7Bi%7D%7D%28%5Ctheta_%7Bhat%7D%29-%5Cmu%29%5E2%7D" alt="[公式]"> 最小的的参数。 X^就是最优解</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      对卡尔曼滤波知识点的总结
    
    </summary>
    
    
      <category term="研究方向" scheme="http://yoursite.com/categories/%E7%A0%94%E7%A9%B6%E6%96%B9%E5%90%91/"/>
    
    
      <category term="卡尔曼滤波" scheme="http://yoursite.com/tags/%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2/"/>
    
      <category term="RKN" scheme="http://yoursite.com/tags/RKN/"/>
    
  </entry>
  
  <entry>
    <title>2020-08-18-解决hexo发布文章报错</title>
    <link href="http://yoursite.com/2020/08/18/2020-08-18-%E8%A7%A3%E5%86%B3hexo%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0%E6%8A%A5%E9%94%99/"/>
    <id>http://yoursite.com/2020/08/18/2020-08-18-%E8%A7%A3%E5%86%B3hexo%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0%E6%8A%A5%E9%94%99/</id>
    <published>2020-08-17T18:35:28.000Z</published>
    <updated>2020-08-18T02:18:01.298Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>在进行<code>hexo s -g</code> 发布文章时，出现如下错误</p><p><img src="https://i.loli.net/2020/08/18/p17vthyDgEBlukC.png" alt="image-20200818023730784"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      解决hexo发布文章报错can not read a block mapping entry
    
    </summary>
    
    
      <category term="故障排除" scheme="http://yoursite.com/categories/%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4/"/>
    
    
      <category term="故障排除" scheme="http://yoursite.com/tags/%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4/"/>
    
      <category term="next" scheme="http://yoursite.com/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>2020-08-18-解决图片caption出现多次</title>
    <link href="http://yoursite.com/2020/08/18/2020-08-18-%E8%A7%A3%E5%86%B3%E5%9B%BE%E7%89%87caption%E5%87%BA%E7%8E%B0%E5%A4%9A%E6%AC%A1/"/>
    <id>http://yoursite.com/2020/08/18/2020-08-18-%E8%A7%A3%E5%86%B3%E5%9B%BE%E7%89%87caption%E5%87%BA%E7%8E%B0%E5%A4%9A%E6%AC%A1/</id>
    <published>2020-08-17T18:19:41.000Z</published>
    <updated>2020-08-18T03:01:15.026Z</updated>
    
    <content type="html"><![CDATA[<p>大部分参考自<a href="https://wylu.github.io/posts/7bd83fc5/" target="_blank" rel="noopener">Hexo NexT 图片caption出现多次</a></p><p>在使用 Hexo + NexT 搭建个人博客的过程中一直有个问题没有解决，直到今天才找到了解决方法。问题就是在展示同一张图片中，caption出现了两次，如图：</p><p><a href="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Tool/Hexo/Hexo-NexT-图片caption出现多次/multiple-captions.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Tool/Hexo/Hexo-NexT-图片caption出现多次/multiple-captions.png" alt="multiple-captions"></a></p><h3 id="问题分析">问题分析</h3><p>图片正下方的 image-caption 是 NexT 给 fancybox 加上的；而图片左下方的 figcaption 是因为使用了 hexo-renderer-pandoc Markdown 渲染器导致的，hexo-renderer-pandoc 将 Markdown 文件渲染成 HTML 时，会对图片进行渲染，然后生成一个 figcaption 的标签。</p><p>很多人可能不会有这样的问题，因为 Hexo 默认的 Markdown 渲染器是 hexo-renderer-marked，hexo-renderer-marked 渲染图片时不会生成 figcaption。</p><p>如果你使用的是 hexo-renderer-marked 渲染器，就不会有这样的问题，但是相信很多人都是因为需要使用 mathjax，所以都将默认的 Hexo 默认的 Markdown 渲染器换成了 hexo-renderer-pandoc，hexo-renderer-pandoc 功能强大（依赖与 pandoc 自身强大的功能），它对数学公式的渲染简直可以说是吊打 hexo-renderer-marked，这也是我一直使用它的原因。</p><p>所以为了在使用 hexo-renderer-pandoc 的同时，把图片 caption 出现了两次的问题解决，我提过 issue，查阅了许多资料，终于找到了解决的方法。</p><h3 id="解决方法">解决方法</h3><p>编辑站点配置文件 <code>_config.yml</code>，添加如下内容：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pandoc:</span><br><span class="line">  extensions:</span><br><span class="line">    - '-implicit_figures'</span><br></pre></td></tr></tbody></table></figure><p>执行下列命令重新生成站点，展示效果如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo s -o</span><br></pre></td></tr></tbody></table></figure><p><a href="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Tool/Hexo/Hexo-NexT-图片caption出现多次/single-caption.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Tool/Hexo/Hexo-NexT-图片caption出现多次/single-caption.png" alt="single-caption"></a></p><h3 id="隐藏-fancybox-的-caption">隐藏 fancybox 的 caption</h3><p>以 NexT v7.7.0 为例，通过查看 hexo-theme-next/source/js/utils.js 源码，发现 NexT 在使用 fancybox 时，如果图片 title 或 alt 属性不为空时，就会 fancybox 添加一个子标签展示图片的 title 或 alt 属性值。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var imageTitle = $image.attr('title') || $image.attr('alt');</span><br><span class="line">if (imageTitle) {</span><br><span class="line">  $imageWrapLink.append(`&lt;p class="image-caption"&gt;${imageTitle}&lt;/p&gt;`);</span><br><span class="line">  // Make sure img title tag will show correctly in fancybox</span><br><span class="line">  $imageWrapLink.attr('title', imageTitle).attr('data-caption', imageTitle);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果想通过配置支持选择是否展示 caption，可以参考下方的方法（在 NexT v7.7.0 已测试过），其实不管 NexT 的版本如何，解决方法的思路基本是一致的。</p><p>首先修改主题配置文件 <code>_config.yml</code>，找到 fancybox 的配置，将 fancybox 的配置改成如下所示内容：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># FancyBox is a tool that offers a nice and elegant way to add zooming functionality for images.</span><br><span class="line"># For more information: https://fancyapps.com/fancybox</span><br><span class="line">fancybox: </span><br><span class="line">  enable: true</span><br><span class="line">  caption: false</span><br></pre></td></tr></tbody></table></figure><p>其中，enable 控制是否启用 fancybox，而 caption 控制是否展示 caption (当然只有在 enable 为 true 时，caption 配置才有效)，如果你不启用 fancybox 自然也不会有 caption。</p><p>然后，编辑 hexo-theme-next/source/js/utils.js 文件，将上面的代码修改成如下内容：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var imageTitle = $image.attr('title') || $image.attr('alt');</span><br><span class="line">if (imageTitle) {</span><br><span class="line">  if (CONFIG.fancybox.caption) {</span><br><span class="line">    $imageWrapLink.append(`&lt;p class="image-caption"&gt;${imageTitle}&lt;/p&gt;`);</span><br><span class="line">  }</span><br><span class="line">  // Make sure img title tag will show correctly in fancybox</span><br><span class="line">  $imageWrapLink.attr('title', imageTitle).attr('data-caption', imageTitle);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>接着，编辑 hexo-theme-next/source/js/next-boot.js 文件，将 <code>CONFIG.fancybox &amp;&amp; NexT.utils.wrapImageWithFancyBox();</code> 替换成如下内容：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Register JS handlers by condition option.</span><br><span class="line"> * Need to add config option in Front-End at 'layout/_partials/head.swig' file.</span><br><span class="line"> */</span><br><span class="line">CONFIG.fancybox.enable &amp;&amp; NexT.utils.wrapImageWithFancyBox();</span><br></pre></td></tr></tbody></table></figure><p>相信你可以发现，我们这里将 <code>CONFIG.fancybox</code> 替换成 <code>CONFIG.fancybox.enable</code>，正是因为我们自定义的配置是通过 fancybox 下的 enable 的值来确定是否启用的。另外从源码上方的注释可以看到，CONFIG 下的配置项需要在前端文件 'layout/_partials/head.swig' （实际上该文件在'layout/_partials/head/head.swig'）中加上。</p><p>所以最后，我们需要在 <code>layout/_partials/head/head.swig</code> 中修改一下上面我们所使用 <code>CONFIG.fancybox.caption</code> 配置。参照其它配置，这里需要将 <code>fancybox:</code>，修改成如下内容：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fancybox: {{ theme.fancybox | json }}</span><br></pre></td></tr></tbody></table></figure><p>重新生成，效果如下：</p><p><a href="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Tool/Hexo/Hexo-NexT-图片caption出现多次/no-caption.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Tool/Hexo/Hexo-NexT-%E5%9B%BE%E7%89%87caption%E5%87%BA%E7%8E%B0%E5%A4%9A%E6%AC%A1/no-caption.png" alt="no-caption"></a></p><blockquote><h3 id="references">References</h3><p>https://github.com/wzpan/hexo-renderer-pandoc/issues/34</p><p>https://github.com/theme-next/hexo-theme-next/issues/857</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      解决fancybox中图片的标题出现多次
    
    </summary>
    
    
      <category term="故障排除" scheme="http://yoursite.com/categories/%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4/"/>
    
    
      <category term="故障排除" scheme="http://yoursite.com/tags/%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4/"/>
    
      <category term="next" scheme="http://yoursite.com/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>2020-08-16-服务器检修</title>
    <link href="http://yoursite.com/2020/08/16/2020-08-16-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A3%80%E4%BF%AE/"/>
    <id>http://yoursite.com/2020/08/16/2020-08-16-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A3%80%E4%BF%AE/</id>
    <published>2020-08-16T07:27:19.000Z</published>
    <updated>2020-08-27T06:59:13.529Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>实验室的服务器总是出故障，于是和师兄一起考虑将实验室重装系统，并进行一系列操作。因为之前接触的少，这次是一个很好的实践机会，过程中记录笔记如下</p><h3 id="服务器检修">服务器检修</h3><h4 id="实验室的服务器">实验室的服务器</h4><p>实验室有三台机架式服务器</p><table><thead><tr class="header"><th></th><th>Dell poweredge R730</th><th>Dell poweredge R740</th><th>thinkserver rd650</th></tr></thead><tbody><tr class="odd"><td>系统</td><td>ubuntu 16.04</td><td>ubuntu 18.04</td><td>windows server 2008</td></tr></tbody></table><h4 id="制作ubuntu安装u盘">制作ubuntu安装U盘</h4><p>大部分内容参考自<a href="https://blog.csdn.net/zjx2014430/article/details/49303785" target="_blank" rel="noopener">使用UltraISO制作ubuntu安装u盘启动盘图文教程</a>，内容很详细，我的操作就是按照博客里的步骤</p><p>Ubuntu基于Debian发行版和GNOME桌面环境，在下载得到Ubuntu的光盘镜像后，可以选择刻盘引导安装或利用unetbootin工具用U盘引导安装。</p><p><strong>如何用u盘装ubuntu？</strong></p><p>先在网上下载<code>ubuntu16.04镜像</code> 和 <code>UltraISO软件</code></p><p>1、首先打开UltraISO软件，尽量下载最新版的，旧版可能会不能识别磁盘，安装失败!</p><p><img src="https://i.loli.net/2020/08/26/xim8TtON9MqyIYH.jpg" alt="点击查看大图" style="zoom:67%;"></p><p>2、点击工具栏中的第二个打开镜像文件工具，如图红色方框标志按钮，然后在打开的“打开ISO文件”对话框中找到我们下载好的Ubuntu镜像文件，之后点右下方的“打开”按钮</p><p><img src="https://i.loli.net/2020/08/26/hpUG4TbYoAHdDLQ.jpg" alt="点击查看大图" style="zoom:67%;"></p><p>3、打开镜像文件之后，在上方的列表中就会出现对打开的镜像文件的预览左边显示的是具体的目录，右边显示的目录和具体文件</p><p><img src="https://i.loli.net/2020/08/26/kzGMHAhBT1Y3tVg.jpg" alt="点击查看大图" style="zoom:67%;"></p><p>4、下面就开始制作启动盘了，点击菜单栏的“启动”，然后再弹出才按中选择“写入硬盘映像...”，打开“写入硬盘映像”对话框</p><p><img src="https://i.loli.net/2020/08/26/PuEeokUWv7qyhrd.jpg" alt="点击查看大图" style="zoom:67%;"></p><p>5、在写入硬盘映像对话框中，硬盘驱动器选择我们要写入的U盘，写入方式可以选择USB-HDD也可以选择USB-HDD+，两种方式小编都有尝试过，均可以</p><p><img src="https://i.loli.net/2020/08/26/28JSil4sBk9pCxO.jpg" alt="点击查看大图" style="zoom:67%;"></p><p>6、现在的这一步是非常关键的，关系到我们最后制作的硬盘映像能否启动电脑并安装系统，点击“便捷启动”，然后再弹出的菜单中依次选择“写入新的驱动器引导扇区”，再选择“Syslinux”，这一步的没有选择的话，那么我们最后制作的U盘映像将不能识别硬盘，不能安装系统</p><p><img src="https://i.loli.net/2020/08/26/HEQYiB7gqk4ep61.jpg" alt="点击查看大图" style="zoom:67%;"></p><p>7、在选择“Syslinux”后，会弹出如下图所示的提示框，毫无疑问，这里我们应该选择“是”</p><p><img src="https://i.loli.net/2020/08/26/tdT2jmYGVAMQhpN.jpg" alt="点击查看大图" style="zoom:67%;"></p><p>8、将Syslinux引导神曲写入设置的过程非常快，写入完成后，会弹出写入成功的提示框，若是没有写入成功，那么我们要重复上面的6、7步</p><p><img src="https://i.loli.net/2020/08/26/I8rhwpq3iVfCFsv.jpg" alt="点击查看大图" style="zoom:67%;"></p><p>9、现在就到了将ISO内的文件写入到U盘的时候了，点击下面的“写入”按钮，会弹出警告提示框，点击“是”就开始U盘安装盘的写入了</p><p><img src="https://i.loli.net/2020/08/26/HrdAoOFwvIg8SmP.jpg" alt="点击查看大图" style="zoom:67%;"></p><p>10、做完上面一些设置后，点击下面的“写入”按钮，这样就开始了U盘安装盘的制作过程，小编这里用的DVD的镜像文件，文件比较大，所以也比较耗时，在制作完成后，会自动关闭这个“写入硬盘映像”的对话框</p><p><img src="https://i.loli.net/2020/08/26/1DnsEjZBrzQtAc8.jpg" alt="点击查看大图" style="zoom:67%;"></p><p>11、制作完成，打开我的电脑，我们可以看到U盘的磁盘图标和名称都已经改变，其实这些信息是从我们的镜像文件中提取出来的</p><p>制作完成，现在安全弹出U盘，重启电脑，设置冲U盘启动就可以从U盘安装Ubuntu了，具体安装过程请看小编手续的经验文档</p><p><img src="https://i.loli.net/2020/08/26/OEzD8hnmBUrkj2J.jpg" alt="点击查看大图" style="zoom:67%;"></p><ol type="1"><li><p>在进行U盘安装系统之前，我们还需要设置BIOS选项，因为默认的是硬盘启动，因此我们需要进行设置为U盘启动，不同的主板设置U盘启动的方式也不同，因此小编就不在此详述怎么更改BIOS设置，大家查找自己的主板型号然后在网上找相关的设置教程即可。</p><p><a href="http://jingyan.baidu.com/album/a3761b2b66fe141577f9aa51.html?picindex=8" target="_blank" rel="noopener"><img src="https://i.loli.net/2020/08/26/pD2yrl37uQwefsa.jpg" alt="怎么用u盘安装ubuntu"></a></p></li><li><p>完成BIOS设置后我们就可以插入U盘，重启电脑了，我们就可以使用U盘进行Ubuntu操作系统的安装了，具体的安装步骤小编就不在详述了，网上有很多相关的教程，大家可以参考下。</p><p><a href="http://jingyan.baidu.com/album/a3761b2b66fe141577f9aa51.html?picindex=9" target="_blank" rel="noopener"><img src="https://i.loli.net/2020/08/26/wbGayoYzurPMnkR.png" alt="怎么用u盘安装ubuntu"></a></p></li></ol><h4 id="安装系统流程">安装系统流程</h4><p>在bios界面选择USB：data traveler字样的设备，就是U盘，点击就可以进入U盘的ubuntu系统 在ubuntu界面里，选择try ubuntu，就可以在U盘里暂时不安装系统就可以体验。 在try ubuntu中，左侧文件夹目录会显示各个硬盘和U盘的项目。其中computer选项，/home就是U盘里的。可以正常的进行ubuntu操作。 好像会重启格式化还原，也就是向里面拷数据，重启之后再通过U盘进入ubuntu界面，拷的数据就不存在了。而且在自己笔记本上打开U盘，里面的目录是和ubuntu目录不一样的，也没有拷的数据。</p><p>因为要将系统安装在新的硬盘里，所以考虑将新硬盘里的数据拷出来。然而拷进U盘会重置无法读取，旧的硬盘又无法操作（无法在旧硬盘新建文件夹）所以最后就用了另一个数据U盘，找到U盘路径，最终将数据拷到U盘里，再对新硬盘格式化。</p><p>安装ubuntu过程中，在ubuntu主界面正常选择硬盘安装即可。 我们选择的是清空硬盘数据安装（对硬盘格式化）。安装完毕会重启</p><p>在bios界面里，可以调整开机默认启动项（默认进入的系统）。我们想要将新装的系统设为默认。</p><p>F11： boot manager。一般在这里面进行操作。 选择one-shot 启动（U盘系统启动），以及调整默认启动项。</p><ul><li>显示不出挂载的硬盘。 硬盘没插好。需要用劲将硬盘按进去 ，使其完全固定，才会插好。并且在开机的时候，硬盘位置处会亮灯的</li></ul><p>服务器上硬盘是有顺序的。根据服务器版面上的提示，按照从上到下，从左到右依次编号为0,1,2...， 优先级也是依次降低的。所以在启动界面，会优先加载优先级高的硬盘里的系统。 因为旧硬盘之前在上面。新硬盘在下面，后来更换位置，就可以正常加载新装的ubuntu系统。</p><p>sudo -i ： 升级到最高权限。 一些提示没有权限的操作需要进行升级 在文件/夹中， 右键属性，可以看到绝对位置路径。这样方便进行命令行操作。</p><h4 id="配置网络以及远程ssh连接">配置网络以及远程ssh连接</h4><p>本章节的大部分内容参考自<a href="https://blog.51cto.com/tangyade/2330627" target="_blank" rel="noopener">ubuntu16.04的网络配置</a></p><p>截图来自于实际服务器操作</p><p>参考博客 <a href="https://blog.csdn.net/weixin_43162402/article/details/88419024" target="_blank" rel="noopener">远程ssh连接ubuntu</a></p><h5 id="配置网络">配置网络</h5><p>打开ubuntu网络设置</p><p>在IPv4设置中，增加地址和DNS服务器</p><p><img src="https://i.loli.net/2020/08/25/zFQvdOa4rJZ8NCM.png" alt="image-20200825000649093"></p><p>重启系统 <code>shutdown  -r  now</code></p><p>如下 <code>ping www.baidu.com</code> , 如果可以ping通，则网络配置正确</p><p><img src="https://i.loli.net/2020/08/25/sNwuUrzBJ354xAd.png" alt="image-20200825000941898"></p><h5 id="配置ssh">配置ssh</h5><h6 id="检查ssh服务并安装">检查ssh服务，并安装</h6><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -e|grep ssh <span class="comment">#抓取是否有ssh运行程序</span></span><br><span class="line">sudo apt-get update <span class="comment">#更新依赖</span></span><br><span class="line">sudo apt-get install openssh-sever  <span class="comment"># 安装ssh服务</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.loli.net/2020/08/25/cfUBayIj59q7OSY.png" alt="image-20200825002257791"></p><p><img src="https://i.loli.net/2020/08/25/Xn8RufD3AlKEhBC.png" alt="image-20200825002523612"></p><h6 id="启动ssh">启动ssh</h6><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/ssh start  <span class="comment">#启动ssh</span></span><br><span class="line">sudo netstat -tlp</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.loli.net/2020/08/25/HJWKQDbFqnUCk9f.png" alt="image-20200825002331284"></p><p><img src="https://i.loli.net/2020/08/25/1zbncv7DyP43mHN.png" alt="image-20200825002625207"></p><h6 id="重启系统">重启系统</h6><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown  -r  now</span><br></pre></td></tr></tbody></table></figure><h4 id="语言设置">语言设置</h4><p>参考<a href="https://zhuanlan.zhihu.com/p/40755318" target="_blank" rel="noopener">ubuntu的语言设置（中文-&gt;英文）</a></p><h4 id="安装软件">安装软件</h4><h5 id="下载">下载</h5><p>浏览器搜狗输入法的linux版本安装包。 选择<code>save file</code>选项</p><h5 id="安装">安装</h5><ul><li><p>首先找到安装包所在文件夹，复制路径 。如路径<code>/home/dell2/Downloads/</code></p></li><li><p>在安装包右键属性，复制文件名，如 ：<code>sougou_64.deb</code></p></li><li><p>在terminal中命令行 <code>cd /home/dell2/Downloads/</code> 切换到当前文件夹，便于操作</p></li><li><p>继续执行 <code>sudo dpkg -i sougou_64.deb</code> 需要root权限，所以要输入密码</p><blockquote><p>dpkg是linux的deb包管理。</p><p>dpkg： 是Debian packager的简称，是由Debian开发出来的包管理器，软件包在发布时打包成.deb格式</p><p>适用于Dpkg (Debian系)：Ubuntu 注：RPM (Red Hat系)：CentOS、Fedora</p><p>dpkg支持 tar 包。 tar 只是一种压缩文件格式，所以，它只是把文件压缩打包而已</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i *.deb     deb文件的安装</span><br><span class="line">dpkg -r *.deb     deb文件的卸载</span><br><span class="line">dpkg -l           查看当前系统中已经安装的软件包的信息</span><br></pre></td></tr></tbody></table></figure></blockquote></li></ul><h5 id="更新依赖">更新依赖</h5><blockquote><p>dpkg常用命令行dpkg和rpm命令虽然可以解决安装，卸载和查询，但是对于软件包直接的依赖，比如安装的软件包依赖于很多其他的软件包，这两个软件只会将依赖打印出来告诉用户，需要用户一个一个的手动去先安装依赖，当依赖包又依赖其他包时，对于用户实在是不够友好，于是apt和yum出现了，他们的能够自动将依赖下载安装</p><p>apt的全称是Advanced Packaging Tool是Linux系统下的一款安装包管理工具。</p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update  <span class="comment">#更新依赖</span></span><br><span class="line">sudo apt-get install -f  <span class="comment">#修复依赖.使用此命令可修复依赖关系，假如有软件因依赖关系不满足而无法安装，就可以运行此命令自动修复安装程序包所依赖的包。特别是在使用dpkg命令安装deb软件包时出现依赖问题常需要此命令来修复。</span></span><br></pre></td></tr></tbody></table></figure><h5 id="安装完毕">安装完毕</h5><p>打开ubuntu搜索栏就可以搜索到软件，就可以使用啦</p><h4 id="卸载软件">卸载软件</h4><p>参考自<a href="https://blog.csdn.net/luckydog612/article/details/80877179" target="_blank" rel="noopener">ubuntu命令卸载</a></p><p>打开终端，输入<code>dpkg --list</code> ,按下Enter键，终端输出以下内容，显示的是你电脑上安装的所有软件。</p><p>2.在终端中找到你需要卸载的软件的名称，列表是按照首字母排序的。 <img src="https://i.loli.net/2020/08/25/I8ctzH3LJlbNS4p.jpg" alt="找到要卸载的软件包"> 3.在终端上输入命令<code>sudo apt-get --purge remove 包名</code>（<code>--purge</code>是可选项，写上这个属性是将软件及其配置文件一并删除，如不需要删除配置文件，可执行<code>sudo apt-get remove 包名</code>） ，此处我要删除的是<code>polipo</code> ，那么在终端输入<code>sudo apt-get --purge remove polipo</code>，按下回车，输入密码，再次回车。</p><p>4.执行过程中，会提示你是否真的要删除（继续执行删除命令），在终端输入<code>y</code> ，然后回车，删除程序继续执行。 <img src="https://i.loli.net/2020/08/25/zt1kIJoTsn7AlFf.png" alt="确认删除"></p><p>5.正常情况下，再次出现输入命令行删除成功。 <img src="https://i.loli.net/2020/08/25/PRcrVmlbD3NOf65.png" alt="删除成功"></p><p>总结如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dpkg --list  <span class="comment"># 找到要删除的软件 按顺序排列</span></span><br><span class="line">sudo apt-get --purge remove polipo  <span class="comment">#配置文件一起删除</span></span><br></pre></td></tr></tbody></table></figure><h4 id="解决向日葵连接断开问题">解决向日葵连接断开问题</h4><p>实验室740服务器本来是ubuntu16.04，之后升级到ubuntu18.04，在windows上连接ubuntu的向日葵，总是显示正在连接，马上就是连接已断开，于是记录下解决方案。向日葵的客服的官方解答如下：</p><p>1、检查桌面环境是否有启动，若没有请先启动。需开启显示器使用</p><p>2、需要安装lightdm插件否则会提示连接停止</p><p>3、设备终端运行 xhost +再重新发起远程桌面测试能否显示画面</p><p>本次是方案2解决的。</p><blockquote><p>猜测：之前版本是ubuntu16.04支持的是lightdm，所以向日葵是可以正常运行的。而Ubuntu 16.10和更高版本中的默认显示管理器gdm，导致向日葵总是连接断开。所以切换到lightdm就可以了。</p></blockquote><p>将Display Manager切换为lightdm，<strong>重新启动系统</strong>即可：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update </span><br><span class="line">sudo apt-get upgrade </span><br><span class="line">sudo apt-get install lightdm #安装lightdm</span><br><span class="line">sudo dpkg-reconfigure lightdm # 将Display Manage从gdm3切换为lightdm</span><br></pre></td></tr></tbody></table></figure><p>输入用户名和密码后，将出现以下窗口，大致了解显示管理器在系统中的运行方式。</p><p><img src="https://i.loli.net/2020/08/26/VXeSndcL2ybKsW5.jpg" alt="Switch to gdm3" style="zoom:67%;"></p><p>按Enter键确定；将出现以下窗口。可以通过向上和向下箭头键配置新的显示管理器，然后按Enter进行确定。</p><p><img src="https://i.loli.net/2020/08/26/C6mfYuHpz1JyxX8.jpg" alt="Set default display manager"></p><p>重新启动系统时，选择的显示管理器将被配置为默认显示管理器。</p><hr><p>也可再切换为gdm3，并将lightdm删除</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure gdm3 #也可切换为gdm3</span><br><span class="line">sudo apt-get remove lightdm #删除lightdm</span><br></pre></td></tr></tbody></table></figure><p>要检查当前正在使用哪个显示管理器，请运行以下命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/X11/default-display-manager</span><br></pre></td></tr></tbody></table></figure><blockquote><p><code>gdm3</code>，<code>kdm</code>和<code>lightdm</code>都是<strong>显示管理器</strong>（Display Manager），它们提供图形化登录，并且处理用户身份验证。</p><p>显示管理器：向用户显示登录屏幕，当用户成功输入用户名和密码的有效组合时，会话开始。</p><p><img src="https://i.loli.net/2020/08/26/uoEHl4bhSxaF2gj.jpg" alt="Ubuntu LightDM Display manager" style="zoom: 67%;"></p><p>LightDM的登录屏幕</p></blockquote><h4 id="将向日葵设置为开机自启动">将向日葵设置为开机自启动</h4><p>想将向日葵设置为自启动，这样以后重启服务器之后，就可以直接连接向日葵。在向日葵软件里设置并没有效果，于是想着在ubuntu开机启动项里设置。参考自<a href="https://www.cnblogs.com/end/archive/2012/10/12/2721059.html" target="_blank" rel="noopener">linux开机自启动</a></p><blockquote><p>linux随机启动的服务程序都在/etc/init.d这个文件夹里，里面的文件全部都是脚本文件（脚本程序简单的说就是把要运行的程序写到一个文件里让系统能够按顺序执行，类似windows下的autorun.dat文件）</p><p>另外在/etc这个文件夹里还有诸如名为rc1.d, rc2.d一直到rc6.d的文件夹，这些都是linux不同的runlevel，我们一般进入的X windows多用户的运行级别是第5级，也就是rc5.d，在这个文件夹下的脚本文件就是运行第5级时要随机启动的服务程序。</p><p>需要注意的是，在每个rc (1-6).d文件夹下的文件其实都是/etc/init.d文件夹下的文件的一个软连接（类似windows中的快捷方式），也就是说，<strong>在 /etc/init.d文件夹下是全部的服务程序，而每个rc(1-6).d只链接它自己启动需要的相应的服务程序！</strong></p><p>在本次操作中，目的就是写入运行向日葵脚本到/etc/init.d，然后软链接到rc5.d中即可开机自启动</p></blockquote><h5 id="找到系统中名字">找到系统中名字</h5><p>我们不确定向日葵（sunlogin）在系统中的名字，于是如下操作：</p><p>打开终端，输入<code>dpkg --list</code> ,按下Enter键，终端输出以下内容，显示的是你电脑上安装的所有软件。（按照首字母排列的）</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg --list <span class="comment"># 显示所有的软件名称</span></span><br></pre></td></tr></tbody></table></figure><p>找到向日葵名称，为<code>sunloginclient</code></p><h5 id="确定向日葵的位置">确定向日葵的位置</h5><p>要知道<code>sunloginclient</code>在哪里，用locate命令可以找到。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate sunloginclient</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.loli.net/2020/08/26/AGgtMOySf2jd5ca.png" alt="image-20200826221019492"></p><p>选择<code>/usr/local/sunlogin/bin/sunloginclient</code>,这就是向日葵执行文件位置所在。</p><p>其中usr表 示是属于用户的，bin在linux里表示可以执行的程序。</p><h5 id="验证文件位置可忽略">验证文件位置（可忽略）</h5><p>验证是否这个位置可以打开向日葵，ubuntu用命令行的方式启动向日葵</p><ul><li>绝对路径：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/sunlogin/bin/sunloginclient <span class="comment">#直接在终端输入绝对路径即可</span></span><br></pre></td></tr></tbody></table></figure><p>如果可以启动向日葵，则表明路径正确</p><ul><li>如果已经在执行文件所在的文件夹，如<code>/usr/local/sunlogin/bin</code>，则</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sunloginclient  <span class="comment"># 执行文件</span></span><br></pre></td></tr></tbody></table></figure><h5 id="编写sh脚本">编写sh脚本</h5><p>这样，我就可以编写一个脚本程序，把它放到<code>/etc/init.d</code>里，然后在<code>rc5.d</code>里做一个相应的软链接就可以了。</p><p>在<code>/etc/init.d</code>里新建sunlogin.sh脚本，</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/init.d <span class="comment">#cd到该目录下</span></span><br><span class="line">sudo vim sunlogin.sh <span class="comment">#新建脚本</span></span><br></pre></td></tr></tbody></table></figure><p>脚本内容如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh </span></span><br><span class="line">/usr/<span class="built_in">local</span>/sunlogin/bin</span><br></pre></td></tr></tbody></table></figure><p>第一行<strong>#!/bin/sh</strong>是指此脚本使用<strong>/bin/sh</strong>来解释执行，<strong>#!</strong>是特殊的表示符，其后面根的是此解释此脚本的shell的路径。</p><p>第二行就是要运行的命令，也就是打开向日葵。</p><blockquote><p>才开始用的是<code>#!/bin/bash</code> ，发现没有效果。后参照rc5.d里sh文件里格式是sh，于是将其改为<code>#!/bin/sh</code> 。重启有效果。</p><p>#!/bin/sh 和 #!/bin/bash 的区别可以参考<a href="https://www.cnblogs.com/EasonJim/p/6850319.html" target="_blank" rel="noopener">区别</a></p></blockquote><h5 id="建立软链接">建立软链接</h5><p>建立启动项从<code>/etc/init.d</code>到<code>/etc/rc5.d</code>的软链接</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s  /etc/init.d/sunlogin.sh  /etc/rc5.d/S04sunlogin.sh</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.loli.net/2020/08/26/Xeo5zuxMsv8nkba.png" alt="rc5.d中内容"></p><blockquote><p>建立软链接： ln -s 原目录 映射目录</p><p>删除软链接的方法： sudo rm -rf 映射目录</p></blockquote><blockquote><p>软链接相当于windows中的快捷方式，不必重复的占用磁盘空间</p><p>ln命令会保持每一处链接文件的同步性，和快捷方式一样</p><p>当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在 其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。</p><p>具体参考<a href="https://www.runoob.com/linux/linux-comm-ln.html" target="_blank" rel="noopener">链接</a></p><p>还需要注意的一点是，在rc5.d里，每个链接的名字都是以S或者K开头的，S开头的表示是系统启动是要随机启动的，K开头的是不随机启动的。</p><p>如果我要哪个服务随机启动，就把它名字第一个字母K改成S就可以了，当然，把S改成K后，这个服务就不能随机启动了。因此，我这个链接 还要起名为SXXX，这样系统才能让它随机启动。</p></blockquote><h5 id="完成开机自启动">完成开机自启动</h5><p>重启系统后，等一下就可以启动向日葵，完成操作</p><h3 id="计算机启动过程boot">计算机启动过程（boot）</h3><p>计算机启动过程分成四个阶段。 大部分内容参考自博客<a href="http://www.ruanyifeng.com/blog/2013/02/booting.html" target="_blank" rel="noopener">计算机是如何启动的？</a></p><h4 id="一第一阶段bios"><strong>一、第一阶段：BIOS</strong></h4><p>是一组<strong>固化到计算机内主板上一个ROM芯片上的程序</strong>，计算机通电后，第一件事就是读取它。</p><p>它保存着计算机最重要的基本输入输出的程序、系统设置信息、开机后自检程序和系统自启动程序。其主要功能是为计算机提供最底层的、最直接的硬件设置和控制。</p><p>一般设置都是在这个过程中进行的</p><p><img src="https://i.loli.net/2020/08/25/KVNMtAZLJSs5c3H.jpg" alt="img"></p><p>这块芯片里的程序叫做"<strong>基本输入输出系统</strong>"（Basic Input/Output System），简称为<a href="http://en.wikipedia.org/wiki/BIOS" target="_blank" rel="noopener">BIOS</a>。</p><h5 id="硬件自检"><strong>1.1 硬件自检</strong></h5><p>BIOS程序首先检查，计算机硬件能否满足运行的基本条件，这叫做"硬件自检"（Power-On Self-Test），缩写为<a href="http://en.wikipedia.org/wiki/Power-on_self-test" target="_blank" rel="noopener">POST</a>。</p><p>如果硬件出现问题，主板会发出不同含义的<a href="http://en.wikipedia.org/wiki/Power-on_self-test#Original_IBM_POST_beep_codes" target="_blank" rel="noopener">蜂鸣</a>，启动中止。<strong>如果没有问题，屏幕就会显示出CPU、内存、硬盘等信息。</strong></p><p><img src="https://i.loli.net/2020/08/25/Atdr1chebHjRwpM.png" alt="img"></p><h5 id="启动顺序"><strong>1.2 启动顺序</strong></h5><p>硬件自检完成后，BIOS把控制权转交给下一阶段的启动程序。</p><p>这时，BIOS需要知道，"下一阶段的启动程序"具体存放在哪一个设备。也就是说，BIOS需要有一个<strong>外部储存设备</strong>的排序，排在前面的设备就是优先转交控制权的设备。这种排序叫做<strong>"启动顺序"（Boot Sequence）</strong>。</p><p>打开BIOS的操作界面，里面有一项就是"设定启动顺序"。 （可以自己设置）</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201302/bg2013021504.jpg" alt="img"></p><h4 id="二第二阶段主引导记录mbr"><strong>二、第二阶段：主引导记录</strong>（MBR）</h4><p>BIOS按照"启动顺序"，把控制权转交给排在第一位的储存设备。（已安装的硬盘/U盘）</p><p>这时，计算机读取该设备的第一个扇区，也就是读取最前面的512个字节。如果这512个字节的最后两个字节是0x55和0xAA，表明这个设备可以用于启动；如果不是，表明设备不能用于启动，控制权于是被转交给"启动顺序"中的下一个设备。</p><p>这最前面的512个字节，就叫做<a href="http://en.wikipedia.org/wiki/Master_boot_record" target="_blank" rel="noopener">"主引导记录"</a>（Master boot record，缩写为MBR）。</p><h5 id="主引导记录的结构"><strong>2.1 主引导记录的结构</strong></h5><p>"主引导记录"只有512个字节，放不了太多东西。它的<strong>主要作用是，告诉计算机到硬盘的哪一个位置去找操作系统。</strong></p><p>主引导记录由三个部分组成：</p><blockquote><p>　　（1） 第1-446字节：调用操作系统的机器码。</p><p>　　（2） 第447-510字节：分区表（Partition table）。</p><p>　　（3） 第511-512字节：主引导记录签名（0x55和0xAA）。</p></blockquote><p>其中，第二部分"分区表"的作用，是将硬盘分成若干个区。</p><h5 id="分区表"><strong>2.2 分区表</strong></h5><p>硬盘分区有很多<a href="http://en.wikipedia.org/wiki/Disk_partitioning#Benefits_of_multiple_partitions" target="_blank" rel="noopener">好处</a>。考虑到<strong>每个区可以安装不同的操作系统</strong>，"主引导记录"因此必须知道将控制权转交给哪个区。</p><p>分区表的长度只有64个字节，里面又分成四项，每项16个字节。所以，<strong>一个硬盘最多只能分四个一级分区</strong>，又叫做<strong>"主分区"</strong>。</p><p>每个主分区代表一个操作系统，最多只能装4个操作系统。 在操作系统中的区划分是在该主分区下进行的。</p><p>每个主分区的16个字节，由6个部分组成：</p><blockquote><p>　　（1） 第1个字节：如果为0x80，就表示该主分区是激活分区，控制权要转交给这个分区。四个主分区里面只能有一个是激活的。</p><p>　　（2） 第2-4个字节：主分区第一个扇区的物理位置（柱面、磁头、扇区号等等）。</p><p>　　（3） 第5个字节：<a href="http://en.wikipedia.org/wiki/Partition_type" target="_blank" rel="noopener">主分区类型</a>。</p><p>　　（4） 第6-8个字节：主分区最后一个扇区的物理位置。</p><p>　　（5） 第9-12字节：该主分区第一个扇区的逻辑地址。</p><p>　　（6） 第13-16字节：主分区的扇区总数。</p></blockquote><p>最后的四个字节（"主分区的扇区总数"），决定了这个主分区的长度。也就是说，一个主分区的扇区总数最多不超过2的32次方。</p><p>如果每个扇区为512个字节，就意味着单个分区最大不超过2TB。再考虑到扇区的逻辑地址也是32位，所以单个硬盘可利用的空间最大也不超过2TB。如果想使用更大的硬盘，只有2个方法：一是提高每个扇区的字节数，二是<a href="http://en.wikipedia.org/wiki/GUID_Partition_Table" target="_blank" rel="noopener">增加扇区总数</a>。</p><h4 id="三第三阶段硬盘启动"><strong>三、第三阶段：硬盘启动</strong></h4><p>这时，计算机的控制权就要转交给硬盘的某个分区了，这里又分成三种情况。</p><h5 id="情况a卷引导记录"><strong>3.1 情况A：卷引导记录</strong></h5><p>上一节提到，四个主分区里面，只有一个是激活的。计算机会<strong>读取激活分区的第一个扇区</strong>，叫做<a href="http://en.wikipedia.org/wiki/Volume_Boot_Record" target="_blank" rel="noopener">"卷引导记录</a>"（Volume boot record，缩写为VBR）。</p><p>"卷引导记录"的主要作用是，告诉计算机，操作系统在这个分区里的位置。然后，计算机就会加载操作系统了。</p><h5 id="情况b扩展分区和逻辑分区"><strong>3.2 情况B：扩展分区和逻辑分区</strong></h5><p>主分区的其中一个被定义为<strong>扩展分区</strong>，扩展分区下可以设置多个分区，被称为<strong>逻辑分区</strong></p><p>随着硬盘越来越大，四个主分区已经不够了，需要更多的分区。但是，<strong>分区表只有四项，因此规定有且仅有一个区可以被定义成"扩展分区"（Extended partition）。</strong></p><p>所谓<strong>"扩展分区"，就是指这个区里面又分成多个区</strong>。这种分区里面的分区，就叫做"<strong>逻辑分区</strong>"（logical partition）。</p><p>计算机先读取扩展分区的第一个扇区，叫做<a href="http://en.wikipedia.org/wiki/Extended_partition" target="_blank" rel="noopener">"扩展引导记录"</a>（Extended boot record，缩写为EBR）。它里面也包含一张64字节的分区表，但是最多只有两项（也就是两个逻辑分区）。</p><p>计算机接着读取第二个逻辑分区的第一个扇区，再从里面的分区表中找到第三个逻辑分区的位置，以此类推，直到某个逻辑分区的分区表只包含它自身为止（即只有一个分区项）。因此，<strong>扩展分区可以包含无数个逻辑分区。</strong></p><p>但是，似乎很少通过这种方式启动操作系统。如果操作系统确实安装在扩展分区，一般采用下一种方式启动。</p><h5 id="情况c启动管理器常用"><strong>3.3 情况C：启动管理器</strong>（常用）</h5><p>在这种情况下，计算机读取"主引导记录"前面446字节的机器码之后，不再把控制权转交给某一个分区，而是运行事先安装的<a href="http://en.wikipedia.org/wiki/Boot_loader#Modern_boot_loaders" target="_blank" rel="noopener">"启动管理器"</a>（boot loader），由用户选择启动哪一个操作系统。</p><p>Linux环境中，目前最流行的启动管理器是<a href="http://en.wikipedia.org/wiki/GNU_GRUB" target="_blank" rel="noopener">Grub</a>。</p><p><img src="https://i.loli.net/2020/08/25/Ao5JqKFpgmXWOfw.png" alt="img"></p><h4 id="四第四阶段操作系统"><strong>四、第四阶段：操作系统</strong></h4><p>控制权转交给操作系统后，操作系统的内核首先被载入内存。</p><p>以Linux系统为例，先载入<strong>/boot目录下面的kernel</strong>。内核加载成功后，第一个运行的程序是<strong>/sbin/init</strong>。它根据配置文件（Debian系统是/etc/initab）产生init进程。这是Linux启动后的第一个进程，pid进程编号为1，其他进程都是它的后代。</p><p><strong>然后，init线程加载系统的各个模块，比如窗口程序和网络程序，直至执行/bin/login程序，跳出登录界面，等待用户输入用户名和密码。</strong></p><p>至此，全部启动过程完成。</p><h3 id="bios和uefi的区别">BIOS和UEFI的区别</h3><blockquote><p>BOOT设置是说电脑一按开机键后，出现那段黑屏界面BOOT运行时，你按<strong>快捷键</strong>调出各种BOOT后的程序，例如BIOS的这个按键过程。</p><p><a href="http://www.udangjia.com/bios/" target="_blank" rel="noopener">BIOS设置</a>是，你必须按对快捷键，<strong>从BOOT进入BIOS程序后</strong>，在BIOS程序中的设置的这个过程。</p></blockquote><blockquote><p><strong>UEFI</strong>它其实和BIOS是同一个性质的东西，同一种程序，是随着发展出现的BIOS升级版。因为硬件发展迅速，传统式（<strong>Legacy</strong>）BIOS成为进步的包袱，现在已发展出最新的UEFI。理论上说是比BIOS更先进的UEFI，却还是诸多支持不足，往往很多是UEFI启动电脑，到头来还是切换回BIOS。</p></blockquote><p><img src="https://i.loli.net/2020/08/17/dkj8VXRMyTQ1UsI.png" alt="image-20200817235333172"></p><p><strong>现在的笔记本默认是UEFI+GPT</strong>，主流趋势也是使用UEFI进行引导。如果改legacy，必须在Security选项，找到Secure Boot，关闭。</p><h3 id="bios设置">BIOS设置</h3><h4 id="u盘启动">U盘启动</h4><p>按下电源键后,按照显示器上的提示进入BIOS，例如：按F2、F9、F11、F12或者Delete键。</p><p>方法1.直接选择带有USB：data traveler字样的enter进入即可。只是一次进入，下次还需要选择</p><p>方法2.将U盘项设置为First Boot，默认进入。一般在<strong>boot（启动）选项</strong>中进入设置</p><p>有的需要<strong>F10保存</strong>并退出</p><blockquote><p>参考</p><p><a href="https://blog.csdn.net/yuk1007/article/details/95217457" target="_blank" rel="noopener">基础的BIOS操作</a></p><p><a href="http://www.kqidong.com/bios/2771.html" target="_blank" rel="noopener">常见bios设置操作教程</a></p></blockquote><h3 id="计算机存储术语-扇区磁盘块页">计算机存储术语: 扇区，磁盘块，页</h3><blockquote><p><strong>扇区（sector）</strong>：硬盘的读写以扇区为基本单位。</p><p>磁盘上的每个磁道被等分为若干个弧段，这些弧段称之为扇区。</p><p>通常情况下每个扇区的大小是 512 字节。linux 下可以使用 <code>fdisk -l</code> 了解扇区大小</p><p>注意，扇区是磁盘物理层面的概念，操作系统是不直接与扇区交互的，而是与多个连续扇区组成的磁盘块交互。由于扇区是物理层面的概念，所以无法在系统中进行大小的更改。</p></blockquote><blockquote><p>簇：由于操作系统无法对数目众多的扇区进行寻址，所以操作系统就将相邻的扇区组合在一起，形成一个<strong>簇</strong>，然后再对簇进行管理。每个簇可以包括2、4、8、16、32或64个扇区。<strong>操作系统是通过块簇来做为单位读取等操作数据的</strong>。</p><p>为了更好地管理磁盘空间和更高效地从硬盘读取数据，操作系统规定<strong>一个簇中只能放置一个文件的内容</strong>，因此文件所占用的空间，只能是簇的整数倍；而如果文件实际大小小于一簇，它也要占一簇的空间。</p><p>所以，一般情况下文件所占空间要略大于文件的实际大小</p></blockquote><blockquote><p><strong>磁盘块（IO Block）</strong>：<strong>文件系统</strong>读写数据的最小单位，也叫磁盘簇。磁盘块的大小可以通过命令 <code>stat /boot</code> 来查看。</p><p>在Windows下如NTFS等文件系统中叫做簇；在Linux下如Ext4等文件系统中叫做块（block）。</p></blockquote><blockquote><p><strong>页，page</strong></p><p>内存的最小存储单位。页的大小通常为磁盘块大小的 2^n 倍，可以通过命令 <code>getconf PAGE_SIZE</code> 来获取页的大小</p><p>总结也就是</p><ul><li>页，内存操作的基本单位</li><li>磁盘块，磁盘操作的基本单位</li></ul></blockquote><blockquote><p><strong>命令索引</strong></p><ul><li>扇区大小，<code>fdisk -l</code> 查看磁盘分区情况</li><li>磁盘块大小，<code>stat /boot</code></li><li>内存页大小，<code>getconf PAGE_SIZE</code></li></ul></blockquote><h3 id="linux磁盘分区">linux磁盘分区</h3><p>更多内容参考自</p><p><a href="https://wizardforcel.gitbooks.io/vbird-linux-basic-4e/content/20.html" target="_blank" rel="noopener">鸟哥的linux私房菜 | 磁盘分区</a></p><p><a href="https://jasonhzy.github.io/2019/02/07/linux-mount/" target="_blank" rel="noopener">Linux分区与挂载</a></p><h3 id="poweredge-r740-机架式服务器基本操作">PowerEdge R740 机架式服务器基本操作</h3><h4 id="设置开机启动顺序">设置开机启动顺序</h4><p>开机按F2进入系统启动设置，也可以<strong>按F11进入快速启动配置</strong></p><p><img src="https://i.loli.net/2020/08/18/XZFykAOdgmHjJDe.png" alt="image-20200818151126884"></p><p><img src="https://i.loli.net/2020/08/18/OCK5cRzksAWIhyp.png" alt="image-20200818151216211"></p><p><img src="https://i.loli.net/2020/08/18/FpgEyq8vGzBlPXD.png" alt="image-20200818151323442"></p><p><img src="https://i.loli.net/2020/08/18/Rdf19rWcvAOHSp7.png" alt="image-20200818151824019"></p><p>在<strong>Boot Sequence</strong>处将<strong>Hard drive C</strong>设置到第一位，即优先级最高</p><h4 id="运行硬件检测">运行硬件检测</h4><p>怀疑硬件故障了，运行了一下硬件检测。可以看到有哪些硬件。来验证所连接的硬件是否正常工作，排除故障。</p><p>1.开机出现DELL LOGO标志时按2下F10键，等待大概5分钟会进入lifecycle controller界面；</p><p>2.鼠标单击选择左侧的“Hardware Diagnostics”硬件诊断，再单击右侧的“Run Hardware Diagnostics”运行硬件诊断；</p><p><img src="https://i.loli.net/2020/08/18/FNegH5CnmJiRWAa.jpg" alt="img"></p><p>3.自动进入检测</p><p><img src="https://i.loli.net/2020/08/18/oEsxlPruV6DmSw2.jpg" alt="img"></p><p>4.大概5分钟后完成快速检测，出现如下界面，再单击“YES”继续完整检测，大概需要几个小时</p><p><img src="https://i.loli.net/2020/08/18/DKRFHVjpEZo27kW.jpg" alt="img"></p><ol start="5" type="1"><li>检测完成后请单击“Result”结果一列，拍照这个页面，可能需要拖动滚动条拍照未在一屏显示出的其他内容。</li></ol><p><img src="https://i.loli.net/2020/08/18/Yij4DdNxZ3w6RBF.jpg" alt="img"></p><p>6、如果检测出现问题，会弹出红框，点击继续，最后查看一下原因。</p><p><img src="https://i.loli.net/2020/08/18/tYB8e7lsuUyP9fc.jpg" alt="img"></p><p>查一下ERROR CODE，应该是事件日志有历史告警导致的，清除告警之后，再次运行检测程序，没有告警了。</p><h3 id="交换空间">交换空间</h3><p>当今无论什么操作系统 <em>交换(Swap)</em>空间是非常常见的。Linux 使用交换空间来增加主机可用的虚拟内存。</p><p>典型计算机中有<strong>两种基本类型的内存</strong>。第一种类型，<strong>随机存取存储器 (RAM)</strong>，用于存储计算机使用的数据和程序。只有程序和数据存储在 RAM 中，计算机才能使用它们。</p><p><strong>交换空间</strong>是现代 Linux 系统中的第二种内存类型。交换空间的主要功能是当全部的 RAM 被占用并且需要更多内存时，用磁盘空间代替 RAM 内存。</p><p>例如，假设你有一个 8GB RAM 的计算机。如果你启动的程序没有填满 RAM，一切都好，不需要交换。假设你在处理电子表格，当添加更多的行时，你电子表格会增长，加上所有正在运行的程序，将会占用全部的 RAM 。如果这时没有可用的交换空间，你将不得不停止处理电子表格，直到关闭一些其他程序来释放一些 RAM 。</p><p>内核使用一个内存管理程序来检测最近没有使用的内存块（内存页）。内存管理程序将这些相对不经常使用的内存页交换到硬盘上专门指定用于“分页”或交换的特殊分区。这会释放 RAM，为输入电子表格更多数据腾出了空间。那些换出到硬盘的内存页面被内核的内存管理代码跟踪，如果需要，可以被分页回 RAM。</p><p>Linux 计算机中的内存总量是 RAM + 交换分区，交换分区被称为虚拟内存.</p><h4 id="什么是swap"><strong>什么是swap?</strong></h4><p>swap space是磁盘上的一块区域，可以是一个分区，也可以是一个文件，或者是他们的组合。简单点说，当系统物理内存吃紧时，Linux会将内存中不常访问的数据保存到swap上，这样系统就有更多的物理内存为各个进程服务，而当系统需要访问swap上存储的内容时，再将swap上的数据加载到内存中，这就是我们常说的swap out和swap in。</p><p>很多发行版(如ubuntu)的休眠功能依赖于swap分区，当系统休眠的时候，会将内存中的数据保存到swap分区上，等下次系统启动的时候，再将数据加载到内存中，这样可以加快系统的启动速度，所以如果要使用休眠的功能，必须要配置swap分区，并且大小一定要大于等于物理内存</p><p>swap是存放在磁盘上的，磁盘的速度和内存比较起来慢了好几个数量级，如果不停的读写swap，那么对系统的性能肯定有影响，尤其是当系统内存很吃紧的时候，读写swap空间发生的频率会很高，导致系统运行很慢，像死了一样，这个时候添加物理内存是唯一的解决办法。</p><h4 id="参考">参考</h4><blockquote><p><a href="https://segmentfault.com/a/1190000008125116" target="_blank" rel="noopener">Linux交换空间（swap space）</a></p></blockquote><h3 id="服务器ubuntu基本操作">服务器ubuntu基本操作</h3><h4 id="关机">关机</h4><p>立即关机</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># shutdown -h now</span><br></pre></td></tr></tbody></table></figure><p>指定 10 分钟后关机</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># shutdown -h 10</span><br></pre></td></tr></tbody></table></figure><p>重新启动计算机</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># shutdown -r now</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      实验室服务器故障处理
    
    </summary>
    
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="服务器" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="故障排除" scheme="http://yoursite.com/tags/%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4/"/>
    
  </entry>
  
  <entry>
    <title>2020-08-14-解读卡尔曼滤波[第一部分]</title>
    <link href="http://yoursite.com/2020/08/14/2020-08-14-%E8%A7%A3%E8%AF%BB%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2[%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86]/"/>
    <id>http://yoursite.com/2020/08/14/2020-08-14-%E8%A7%A3%E8%AF%BB%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2[%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86]/</id>
    <published>2020-08-13T16:03:56.000Z</published>
    <updated>2020-08-30T07:22:04.465Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于卡尔曼滤波">关于卡尔曼滤波</h3><p>大多数现代系统都搭载上数量众多的传感器，它们通过传感器返回的一系列测量数据来估算一些有用的信息。例如，我们生活上的GPS接收器就是提供位置和速度的装置，它估算的位置和速度就是我们需要的有用数据，而不同时刻的卫星数据就是一系列的测量数据。</p><p><strong>对于一个跟踪和控制系统来说，其中最大的问题就是在存在不确定性的前提下提供一个准确的有用信息。</strong>回到刚刚的例子，GPS接收器测量的卫星数据充满不确定性，这些不确定性往往取决于外部环境的变化，其中包括热噪声，大气层影响，卫星位置的轻微改变，GPS的内部时钟准确性等等。</p><p>而卡尔曼滤波就是众多常用且重要的估算算法。因为卡尔曼滤波器在进行预估时是默认假设输入数据是不准确的。与此同时，卡尔曼滤波是根据上一次系统的预估值来预估下一次系统的状态。</p><p>这种类型的滤波器是卡尔曼首次公开发表的，因此被命名为卡尔曼滤波器。在1960年，卡尔曼发布了一篇描述离散数据线性滤波问题的递归解的问题的论文。</p><p>现在，卡尔曼滤波器常常用于雷达跟踪系统，位置和导航系统，控制系统，计算机图形等等领域。</p><h3 id="一个预测例子">一个预测例子</h3><p>在介绍卡尔曼滤波之前，让我们先来了解一下预测算法。</p><p>我们用一个雷达跟踪系统作为例子。</p><p><img src="https://www.kalmanfilter.net/img/Overview/tracking_radar.png" alt="Tracking Radar"></p><p>雷达跟踪系统向目标方向发射一个笔尖型射束用于追踪目标。假设发射周期为5S，因此，雷达系统会在每5秒的时间后通过向目标方向发射专用的跟踪射束来定位目标。</p><p>在发射射束之后，雷达系统会估算当前目标的位置和速度。与此同时，雷达系统也会预测下一个发射束应该发送到哪一个位置。</p><p>通过牛顿运动方程，我们能很容易计算出目标在下一个发射周期的位置。</p><p><img src="https://i.loli.net/2020/08/19/AIj2cnWB7HYlMzQ.png" alt="image-20200819142535510"></p><p>将上诉公式映射到<strong>三维空间</strong>，我们可以将牛顿运动方程作为系统的方程：</p><p><img src="https://i.loli.net/2020/08/19/ZnDtdf9ENB7xkga.png" alt="image-20200819142610853"></p><p>这些目标参数 [x,y,z,vx,vy,vz,ax,ay,az][x,y,z,vx,vy,vz,ax,ay,az] 被称为 <strong>系统状态</strong>. 通过当前系统状态代入到系统方程中，我们可以得到目标的下一个系统状态。</p><p>上面的方程被称为 <strong>动态模型</strong> (或者<strong>空间状态模型</strong>). 动态模型是一种描述输入和输出关系的方法。</p><p>回到我们的例子,我们知道当我们有了当前系统状态和掌握系统的动态模型之后，我们就能很容易地预测出目标的下一个状态。</p><p>然而并不是这样的。首先,雷达系统的测量数值不是完全可靠，它包含随机误差(或者这类型的不确定性)。这些随机错误的大小取决于很多因素，例如雷达自身的准确性，发射光束的宽度，返回信号强弱等等。这些测量误差被称为<strong>测量噪声</strong>。</p><p>此外, 因为有很多外部因素会做成干扰，目标运动并不是完全按着运动方程。例如：风向，空气流动，驾驶策略等等。这个动态模型误差被称为 <strong>处理噪声</strong>。</p><p>因为测量噪声和处理噪声的存在，这个根据上诉系统方程估算出来的目标位置会真实的目标位置相差很大。假若这样，雷达系统会向错误的方向发射跟踪射束并且丢失目标。</p><p>为了提高雷达跟踪系统的表现，这就需要<strong>能够将处理噪声和测量噪声考虑进来的预测算法</strong>。</p><p>对于此类算法，应用得最广泛无疑是<strong>卡尔曼滤波</strong>. (处理模型中的噪声)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      对卡尔曼滤波知识点的总结
    
    </summary>
    
    
      <category term="研究方向" scheme="http://yoursite.com/categories/%E7%A0%94%E7%A9%B6%E6%96%B9%E5%90%91/"/>
    
    
      <category term="卡尔曼滤波" scheme="http://yoursite.com/tags/%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2/"/>
    
      <category term="RKN" scheme="http://yoursite.com/tags/RKN/"/>
    
  </entry>
  
  <entry>
    <title>2020-08-12-更换hexo渲染器支持Latex</title>
    <link href="http://yoursite.com/2020/08/12/2020-08-12-%E6%9B%B4%E6%8D%A2hexo%E6%B8%B2%E6%9F%93%E5%99%A8%E6%94%AF%E6%8C%81Latex/"/>
    <id>http://yoursite.com/2020/08/12/2020-08-12-%E6%9B%B4%E6%8D%A2hexo%E6%B8%B2%E6%9F%93%E5%99%A8%E6%94%AF%E6%8C%81Latex/</id>
    <published>2020-08-12T15:44:37.000Z</published>
    <updated>2020-08-12T16:41:07.645Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><blockquote><p><code>LATEX</code> 是一种基于 <code>TEX</code> 的排版系统，利用这种格式，可以迅速生成复杂表格和数学公式等，对于我们写博客帮助十分大。</p></blockquote><h3 id="初级">初级</h3><h4 id="版本">版本</h4><p>我使用的是hexo + Next ，版本号如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hexo: <span class="number">4.2</span><span class="number">.1</span>  <span class="comment">#在 ~\package.json中查看</span></span><br><span class="line">NexT: <span class="number">7.8</span><span class="number">.0</span>  <span class="comment"># 在~\themes\next\package.json中查看</span></span><br></pre></td></tr></tbody></table></figure><h4 id="mathjax-插件">MathJax 插件</h4><p>渲染数学公式需要MathJax插件，有些 Hexo 主题自带 MathJax 插件，例如 <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT</a>只需启用该插件即可</p><p>如果没有的话，可以手动安装：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-math --save</span><br></pre></td></tr></tbody></table></figure><h4 id="启用">启用</h4><p>NexT 主题的 MathJax 插件默认是禁用的，打开主题配置文件，将<code>mathjax</code>的<code>enable</code> 的值改为 <code>true</code> 即可启用 <code>MathJax</code></p><p>注意 <code>per_page</code> 上面的注释，注释表明了，MathJax 只渲染在文件前端注明 <code>mathjax: true</code> 字段的文章，</p><p>所以为了以后在每一个新建的文件都默认带有<code>mathjax: true</code> ，可以在<code>~\scaffolds\post.md</code>中修改文章头部，添加<code>mathjax: true</code> 即可</p><h4 id="效果">效果</h4><p>行内公式：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个行内公式：$sin^2\theta + cos^2\theta = 1$</span><br></pre></td></tr></tbody></table></figure><p>效果：</p><p>这是一个行内公式：<span class="math inline">\(sin^2\theta + cos^2\theta = 1\)</span></p><p>整行公式：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$sin^2\theta + cos^2\theta = 1$$</span><br></pre></td></tr></tbody></table></figure><p>效果：</p><p><span class="math display">\[sin^2\theta + cos^2\theta = 1\]</span></p><h4 id="获取latex公式mathpix-snipping-tool">获取Latex公式：Mathpix Snipping Tool</h4><p>如果要写Latex公式的话，需要掌握很多Latex语法，操作起来比较麻烦，学习成本也高。再加上平时我都是直接copy所读论文中的公式，于是我使用了<code>Mathpix Snipping Tool</code> 软件。</p><p><code>Mathpix Snipping Tool</code> ： 通过对所要获取的公式进行截图，可以得到公式的Latex表达形式，复制到博客中即可。操作简单高效。使用方法不再赘述，网上资源很多。</p><h3 id="高级">高级</h3><h4 id="危渲染复杂latex数学公式出现问题">危：渲染复杂LaTeX数学公式出现问题</h4><p>发现一个问题就是编辑好的LaTex公式可以在 Markdown 编辑器（Typora）中显示出来，但部署之后，公式出现无法被渲染</p><p>之后通过Google之后，发现问题的一些源头</p><blockquote><p>将<code>MathJax</code>改为true后发现，<strong>只能渲染部分简单的公式</strong>，对于稍微复杂一点的，特别是有下划线 ' _ ' 符号的公式，几乎都无法被渲染。</p><p>hexo默认使用marked.js去解析我们写的markdown，比如一些符号，_代表斜体，会被处理为*标签，比如x_i在开始被渲染的时候，处理为xi，比如__init__会被处理成<strong>init。</strong>*</p><p>Hexo 对 Markdown 文件的处理实际上分为两个步骤：</p><ol type="1"><li>Hexo 中的 Markdown 引擎把 Markdown 变为 html 文件</li><li>MathJax 负责解释 html 的数学公式</li></ol></blockquote><p>所以现有的hexo渲染器是无法解决当前的问题，所以就要更换渲染器</p><h4 id="下载pandoc">下载pandoc</h4><p>打开powershell，输入以下命令行</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Pandoc</span><br></pre></td></tr></tbody></table></figure><h4 id="安装-hexo-renderer-pandoc">安装 hexo-renderer-pandoc</h4><p>在blog文件夹下打开git bash</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save #卸载旧版本</span><br><span class="line"><span class="meta">#</span><span class="bash">因为之前为了支持emoji，我已经将hexo-renderer-marked换成了hexo-renderer-markdown-it，所以我卸载后者</span></span><br><span class="line">npm install hexo-renderer-pandoc --save #安装新版本</span><br></pre></td></tr></tbody></table></figure><h4 id="更新部署">更新部署</h4><p>可以看到对于复杂的公式也是支持的~</p><p><img src="https://i.loli.net/2020/08/13/cXzadkQeCvAIwfB.png" alt="image-20200813003737055"></p><h3 id="注意事项">注意事项</h3><p>如果你使用这款 Pandoc renderer，那么书写 Markdown 时候需要遵循 <a href="https://pandoc.org/MANUAL.html#pandocs-markdown" target="_blank" rel="noopener">Pandoc 对 Markdown 的规定</a>。</p><p>有一些比较明显的需要注意的事项：正常的文字后面如果跟的是<a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#lists" target="_blank" rel="noopener"><code>list</code></a>, <a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#tables" target="_blank" rel="noopener"><code>table</code></a>或者<a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#blockquotes" target="_blank" rel="noopener"><code>quotation</code></a>，文字后面需要空一行，如果不空行，这些环境将不能被 Pandoc renderer 正常渲染。</p><h3 id="参考">参考</h3><blockquote><p>Hexo渲染Latex出现的问题： https://zhuanlan.zhihu.com/p/35988761</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      更换hexo渲染器支持Latex
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="Latex" scheme="http://yoursite.com/tags/Latex/"/>
    
  </entry>
  
  <entry>
    <title>2020-08-12-hexo添加emoji表情</title>
    <link href="http://yoursite.com/2020/08/12/2020-08-12-hexo%E6%B7%BB%E5%8A%A0emoji%E8%A1%A8%E6%83%85/"/>
    <id>http://yoursite.com/2020/08/12/2020-08-12-hexo%E6%B7%BB%E5%8A%A0emoji%E8%A1%A8%E6%83%85/</id>
    <published>2020-08-12T09:16:54.000Z</published>
    <updated>2020-08-18T02:30:25.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>markdown支持在文本中使用emoji，在Typora中可以很方便地使用表情。例如输入 <code>:star:</code> ,可以显示出:star:表情，即表情的<code>aliases</code> 编码格式。但是在部署到网站的时候，<span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span>却渲染不出来，我寻找了很久的解决方案，终于解决 <span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span></p><h3 id="更换hexo渲染器">更换hexo渲染器</h3><p>我的hexo版本是version 4.2.1, 可以在在根目录下 packge.json 文件里面看到使用hexo初始化的结果。</p><p>将markdown 变成html的转换器叫做<code>markdown渲染器</code>.在Hexo中默认的markdown渲染器 使用的是<a href="https://github.com/hexojs/hexo-renderer-marked" target="_blank" rel="noopener">hexo-renderer-marked</a>,是Hexo版本，这个渲染器不支持插件扩展。另外一个 markdown 渲染器 <a href="https://github.com/celsomiranda/hexo-renderer-markdown-it" target="_blank" rel="noopener">hexo-renderer-markdown-it</a>，这个支持插件配置，可以使用 <a href="https://github.com/markdown-it/markdown-it-emoji" target="_blank" rel="noopener">markwon-it-emoji</a>插件来支持emoji。</p><p>解决方案：将原来的 <code>marked</code> 渲染器换成 <code>markdown-it</code>渲染器。</p><h4 id="安装新的渲染器">安装新的渲染器</h4><p>首先进入博客目录,卸载hexo默认的<code>marked</code>渲染器，安装<code>markdown-it</code>渲染器，运行的命令如：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd Documents/blog</span><br><span class="line">npm un hexo-renderer-marked --save  #卸载旧的渲染器</span><br><span class="line">npm i hexo-renderer-markdown-it --save #暗转新的渲染器</span><br></pre></td></tr></tbody></table></figure><p>之后安装<code>markdown-it-emoji</code>插件：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install markdown-it-emoji --save</span><br></pre></td></tr></tbody></table></figure><h4 id="编辑站点配置文件">编辑站点配置文件</h4><p>这里的站点配置文件是指位于博客根目录下的 <code>_config.yml</code>，编辑它，然后在末尾添加如下内容：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Markdown-it config</span></span><br><span class="line"><span class="comment">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">render:</span></span><br><span class="line">    <span class="attr">html:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">xhtmlOut:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">breaks:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">linkify:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">typographer:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">quotes:</span> <span class="string">'“”‘’'</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-abbr</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-footnote</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-ins</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sub</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sup</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-emoji</span>  <span class="comment"># add emoji</span></span><br><span class="line">  <span class="attr">anchors:</span></span><br><span class="line">    <span class="attr">level:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">collisionSuffix:</span> <span class="string">'v'</span></span><br><span class="line">    <span class="attr">permalink:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">permalinkClass:</span> <span class="string">header-anchor</span></span><br><span class="line">    <span class="attr">permalinkSymbol:</span> <span class="string">¶</span></span><br></pre></td></tr></tbody></table></figure><p>上面的是<code>hexo-renderer-markdown-it</code>的所有选项的配置，详细的每一项配置说明，需要到<a href="https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki/Advanced-Configuration" target="_blank" rel="noopener">Advanced Configuration</a>中查看。</p><p>这个时候就可以用表情的<code>aliases</code> 编码格式啦</p><p>如果觉得表情渲染的不好看，那么可以安装<a href="https://github.com/twitter/twemoji" target="_blank" rel="noopener">twemoji</a>，对表情进行优化。但是我对现在的渲染感到满意，就没有继续安装。</p><h4 id="查找emoji">查找emoji</h4><p>表情的<code>aliases</code> 编码可以参考<a href="https://www.webfx.com/tools/emoji-cheat-sheet/" target="_blank" rel="noopener">emoji-cheat-sheet</a>，表情很全，可以找到每个表情的表示，运用到自己的文章里</p><h3 id="unicode编码方案">Unicode编码方案</h3><p>如果不更换hexo渲染器，那么可以使用表情的<code>Unicode</code>表达方式。不过不推荐此方式，感觉过于麻烦</p><p>语法： <code>&amp;#xCODE ;</code></p><p>其中<code>CODE</code>是每个表情的编码方式，可以通过 <a href="https://link.zhihu.com/?target=https%3A//apps.timwhitlock.info/emoji/tables/unicode%23block-4-enclosed-characters">Emoji Unicode Tables</a>查询得到</p><p><strong>例子：</strong> 查到了 表情对应的 <strong>Unicode</strong> 编码为 <code>U+1F34E</code>，则与此表情对应的 <code>CODE</code> 为 <code>1F34E</code> (舍弃前面的 <strong>U+</strong>)。输入markdown文档内即可</p><h3 id="后续">后续</h3><p>因为要读论文，然而在论文中会出现很多的数学公式，这时候需要运用Latex，原始的hexo渲染器<a href="https://github.com/hexojs/hexo-renderer-marked" target="_blank" rel="noopener">hexo-renderer-marked</a>对渲染不了公式，在为了能够添加emoji而更换的新渲染器 <a href="https://github.com/celsomiranda/hexo-renderer-markdown-it" target="_blank" rel="noopener">hexo-renderer-markdown-it</a>还是无法渲染Latex公式<span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f610.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f610.png?v8">😐</span></p><p>于是我又准备更换hexo渲染器，来让新的渲染器支持数学公式，于是我就更换了 <a href="https://github.com/wzpan/hexo-renderer-pandoc" target="_blank" rel="noopener">hexo-renderer-pandoc</a>，支持Mathjax语法，十分靠谱，然而问题来了，那就是不支持emoji了 <span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f610.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f610.png?v8">😐</span></p><p>在我准备在两者中舍弃一个，或者用emoji的Unicode编码来代替渲染器的时候，我发现了一个插件，就尝试在现有的渲染器基础上添加了一个hexo插件 <a href="https://github.com/crimx/hexo-filter-github-emojis" target="_blank" rel="noopener">hexo-filter-github-emojis</a> ，发现此插件可以有效支持emoji表情，于是两全其美啦<span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span></p><hr><p>下面是插件的使用说明</p><h4 id="安装插件">安装插件</h4><p>使用以下命令安装 <a href="https://github.com/crimx/hexo-filter-github-emojis" target="_blank" rel="noopener">hexo-filter-github-emojis</a> 插件：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-github-emojis --save</span><br></pre></td></tr></tbody></table></figure><h4 id="启用插件">启用插件</h4><p>向站点配置文件 <code>hexo_root\_config.yml</code> 中添加如下设置：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">githubEmojis:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">className:</span> <span class="string">github-emoji</span></span><br><span class="line">  <span class="attr">unicode:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">styles:</span></span><br><span class="line">    <span class="attr">display:</span> <span class="string">inline</span></span><br><span class="line">    <span class="attr">vertical-align:</span> <span class="string">middle</span> <span class="comment"># Freemind适用</span></span><br><span class="line">  <span class="attr">localEmojis:</span></span><br></pre></td></tr></tbody></table></figure><p>具体的每个配置项含义参见 <a href="https://github.com/crimx/hexo-filter-github-emojis" target="_blank" rel="noopener">说明文档</a>。</p><h4 id="使用方法">使用方法</h4><p>和上述使用方法一样，很方便！ <span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8">🌈</span></p><h3 id="参考">参考</h3><blockquote><p>hexo中添加表情： https://www.cnblogs.com/fsong/p/5929773.html</p><p>hexo 使用emoji： https://spacefan.github.io/2018/06/30/hexo-emoji/</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      解决hexo无法渲染emoji表情的问题
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="故障排除" scheme="http://yoursite.com/tags/%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>2020-08-12-新页面添加友链</title>
    <link href="http://yoursite.com/2020/08/12/2020-08-12-%E6%96%B0%E9%A1%B5%E9%9D%A2%E6%B7%BB%E5%8A%A0%E5%8F%8B%E9%93%BE/"/>
    <id>http://yoursite.com/2020/08/12/2020-08-12-%E6%96%B0%E9%A1%B5%E9%9D%A2%E6%B7%BB%E5%8A%A0%E5%8F%8B%E9%93%BE/</id>
    <published>2020-08-12T06:19:06.000Z</published>
    <updated>2020-08-12T16:52:21.740Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>NexT 主题自带的友情链接的位置是在侧栏的 Social Link 中，位置不太明显，而且容量比较小，不美观。因此可以自定义一个特定的页面，单独显示友情链接</p><h3 id="新建links.swig-文件">新建<code>links.swig</code> 文件</h3><p>首先，在 <code>~/themes/next/layout/</code> 目录下新建一个 <code>links.swig</code> 文件，并写入以下内容：</p><!-- 所在目录：~/themes/next/layout/ --><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">{% block content %}</span><br><span class="line">  {######################}</span><br><span class="line">  {###  LINKS BLOCK   ###}</span><br><span class="line">  {######################}</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"links"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.links-content</span>{</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin-top</span><span class="selector-pseudo">:1rem</span>;</span></span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.link-navigation</span><span class="selector-pseudo">::after</span> {</span></span><br><span class="line">            content: " ";</span><br><span class="line">            display: block;</span><br><span class="line">            clear: both;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.card</span> {</span></span><br><span class="line">            width: 240px;</span><br><span class="line">            font-size: 1rem;</span><br><span class="line">            padding: 10px 20px;</span><br><span class="line">            border-radius: 4px;</span><br><span class="line"><span class="css">            <span class="selector-tag">transition-duration</span>: 0<span class="selector-class">.15s</span>;</span></span><br><span class="line">            margin-bottom: 1rem;</span><br><span class="line"><span class="css">            <span class="selector-tag">display</span><span class="selector-pseudo">:flex</span>;</span></span><br><span class="line">        }</span><br><span class="line"><span class="css">        <span class="keyword">@media</span> (<span class="attribute">max-width:</span> <span class="number">767px</span>) {</span></span><br><span class="line"><span class="css"><span class="selector-class">.card</span><span class="selector-pseudo">:nth-child(odd)</span> {</span></span><br><span class="line">                float: left;</span><br><span class="line">            }</span><br><span class="line"><span class="css">            <span class="selector-class">.card</span><span class="selector-pseudo">:nth-child(even)</span> {</span></span><br><span class="line">                float: left !important;</span><br><span class="line">            }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.card</span><span class="selector-pseudo">:nth-child(odd)</span> {</span></span><br><span class="line">            float: left;</span><br><span class="line">        }</span><br><span class="line"><span class="css">        <span class="selector-class">.card</span><span class="selector-pseudo">:nth-child(even)</span> {</span></span><br><span class="line">            float: right;</span><br><span class="line">        }</span><br><span class="line"><span class="css">        <span class="selector-class">.card</span><span class="selector-pseudo">:hover</span> {</span></span><br><span class="line"><span class="css">            <span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(1<span class="selector-class">.1</span>);</span></span><br><span class="line"><span class="css">            <span class="selector-tag">box-shadow</span>: 0 2<span class="selector-tag">px</span> 6<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.12</span>), 0 0 6<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.04</span>);</span></span><br><span class="line">        }</span><br><span class="line"><span class="css">        <span class="selector-class">.card</span> <span class="selector-tag">a</span> {</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:none</span>; </span></span><br><span class="line">        }</span><br><span class="line"><span class="css">        <span class="selector-class">.card</span> <span class="selector-class">.ava</span> {</span></span><br><span class="line">            width: 3rem!important;</span><br><span class="line">            height: 3rem!important;</span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>!<span class="selector-tag">important</span>;</span></span><br><span class="line">            margin-right: 1em!important;</span><br><span class="line"><span class="css">            <span class="selector-tag">border-radius</span><span class="selector-pseudo">:4px</span>;</span></span><br><span class="line">            </span><br><span class="line">        }</span><br><span class="line"><span class="css">        <span class="selector-class">.card</span> <span class="selector-class">.card-header</span> {</span></span><br><span class="line">            font-style: italic;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            width: 100%;</span><br><span class="line">        }</span><br><span class="line"><span class="css">        <span class="selector-class">.card</span> <span class="selector-class">.card-header</span> <span class="selector-tag">a</span> {</span></span><br><span class="line">            font-style: normal;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#2bbc8a</span>;</span></span><br><span class="line">            font-weight: bold;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">        }</span><br><span class="line"><span class="css">        <span class="selector-class">.card</span> <span class="selector-class">.card-header</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> {</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#a166ab</span>;</span></span><br><span class="line">            text-decoration: none;</span><br><span class="line">        }</span><br><span class="line"><span class="css">        <span class="selector-class">.card</span> <span class="selector-class">.card-header</span> <span class="selector-class">.info</span> {</span></span><br><span class="line"><span class="css">            <span class="selector-tag">font-style</span><span class="selector-pseudo">:normal</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>:<span class="selector-id">#a3a3a3</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">font-size</span><span class="selector-pseudo">:14px</span>;</span></span><br><span class="line">            min-width: 0;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            white-space: nowrap;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">span</span><span class="selector-class">.focus-links</span> {</span></span><br><span class="line">            font-style: normal;</span><br><span class="line">            margin-left: 10px;</span><br><span class="line">            position: unset;</span><br><span class="line">            left: 0;</span><br><span class="line">            padding: 0 7px 0 5px;</span><br><span class="line">            font-size: 11px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border-color</span>: <span class="selector-id">#42c02e</span>;</span></span><br><span class="line">            border-radius: 40px;</span><br><span class="line">            line-height: 24px;</span><br><span class="line">            height: 22px;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fff</span> !<span class="selector-tag">important</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#42c02e</span>;</span></span><br><span class="line">            display: inline-block;</span><br><span class="line">        }</span><br><span class="line"><span class="css">        <span class="selector-tag">span</span><span class="selector-class">.focus-links</span><span class="selector-pseudo">:hover</span>{</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#318024</span>;</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.friends-btn</span>{</span></span><br><span class="line">            text-align: center;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#555</span>!<span class="selector-tag">important</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            border-radius: 3px;</span><br><span class="line">            font-size: 15px;</span><br><span class="line"><span class="css">            <span class="selector-tag">box-shadow</span>: <span class="selector-tag">inset</span> 0 0 10<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.35</span>);</span></span><br><span class="line">            border: none!important;</span><br><span class="line">            transition-property: unset;</span><br><span class="line">            padding: 0 15px;</span><br><span class="line">            margin: inherit;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.friends-btn</span><span class="selector-pseudo">:hover</span>{</span></span><br><span class="line">            color: rgb(255, 255, 255) !important;</span><br><span class="line">            border-radius: 3px;</span><br><span class="line">            font-size: 15px;</span><br><span class="line"><span class="css">            <span class="selector-tag">box-shadow</span>: <span class="selector-tag">inset</span> 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.35</span>);</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-image</span>: <span class="selector-tag">linear-gradient</span>(90<span class="selector-tag">deg</span>, <span class="selector-id">#a166ab</span> 0%, <span class="selector-id">#ef4e7b</span> 25%, <span class="selector-id">#f37055</span> 50%, <span class="selector-id">#ef4e7b</span> 75%, <span class="selector-id">#a166ab</span> 100%);</span></span><br><span class="line">            margin: inherit;</span><br><span class="line">        }</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"links-content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"link-navigation"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            {% for link in theme.mylinks %}</span><br><span class="line">            </span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"ava"</span> <span class="attr">src</span>=<span class="string">"{{ link.avatar }}"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-header"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"{{ link.site }}"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span> {{ link.nickname }}<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"{{ link.site }}"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"focus-links"</span>&gt;</span>关注<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span>{{ link.info }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            {% endfor %}</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        {{ page.content }}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">     {##########################}</span><br><span class="line">  {###   END LINKS BLOCK  ###}</span><br><span class="line">  {##########################}</span><br><span class="line">{% endblock %}</span><br></pre></td></tr></tbody></table></figure><p>可以根据喜好自己更改样式</p><h3 id="修改page.swig文件">修改<code>page.swig</code>文件</h3><p>将代码行前<code>+</code>的代码添加到文件中</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">{% extends '_layout.swig' %}</span><br><span class="line">{% import '_macro/sidebar.swig' as sidebar_template with context %}</span><br><span class="line"></span><br><span class="line">  {% block title %}</span><br><span class="line">    {%- set page_title_suffix = ' | ' + title %}</span><br><span class="line"></span><br><span class="line">{%- if page.type === 'categories' and not page.title %}</span><br><span class="line">  {{- __('title.category') + page_title_suffix }}</span><br><span class="line">{%- elif page.type === 'tags' and not page.title %}</span><br><span class="line">  {{- __('title.tag') + page_title_suffix }}</span><br><span class="line"></span><br><span class="line">+ {%- elif page.type === 'links' and not page.title %}</span><br><span class="line">+{{- __('title.links') + page_title_suffix }}</span><br><span class="line">{%- elif page.type === 'schedule' and not page.title %}</span><br><span class="line">  {{- __('title.schedule') + page_title_suffix }}</span><br><span class="line">{%- else %}</span><br><span class="line">  {{- page.title + page_title_suffix }}</span><br><span class="line">{%- endif %}</span><br><span class="line">{% endblock %}</span><br><span class="line"></span><br><span class="line">{% block content %}</span><br><span class="line"></span><br><span class="line">  &lt;div class="posts-expand"&gt;</span><br><span class="line">    {##################}</span><br><span class="line">    {### PAGE BLOCK ###}</span><br><span class="line">    {##################}</span><br><span class="line">    &lt;div class="post-block" lang="{{ page.lang or page.language or config.language }}"&gt;</span><br><span class="line">      {% include '_partials/page/page-header.swig' %}</span><br><span class="line">      {#################}</span><br><span class="line">      {### PAGE BODY ###}</span><br><span class="line">      {#################}</span><br><span class="line">      &lt;div class="post-body{%- if page.direction and page.direction.toLowerCase() === 'rtl' %} rtl{%- endif %}"&gt;</span><br><span class="line">        {%- if page.type === 'tags' %}</span><br><span class="line">          &lt;div class="tag-cloud"&gt;</span><br><span class="line">            &lt;div class="tag-cloud-title"&gt;</span><br><span class="line">              {{ _p('counter.tag_cloud', site.tags.length) }}</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class="tag-cloud-tags"&gt;</span><br><span class="line">              {{ tagcloud({min_font: theme.tagcloud.min, max_font: theme.tagcloud.max, amount: theme.tagcloud.amount, color: true, start_color: theme.tagcloud.start, end_color: theme.tagcloud.end}) }}</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        {% elif page.type === 'categories' %}</span><br><span class="line">          &lt;div class="category-all-page"&gt;</span><br><span class="line">            &lt;div class="category-all-title"&gt;</span><br><span class="line">              {{ _p('counter.categories', site.categories.length) }}</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class="category-all"&gt;</span><br><span class="line">              {{ list_categories() }}</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">+       {% elif page.type === 'links' %}</span><br><span class="line">+         {% include 'links.swig' %}</span><br><span class="line">        {% elif page.type === 'schedule' %}</span><br><span class="line">          &lt;div class="event-list"&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          {% include '_scripts/pages/schedule.swig' %}</span><br><span class="line">        {% else %}</span><br><span class="line">          {{ page.content }}</span><br><span class="line">        {%- endif %}</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      {#####################}</span><br><span class="line">      {### END PAGE BODY ###}</span><br><span class="line">      {#####################}</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    {% include '_partials/page/breadcrumb.swig' %}</span><br><span class="line">    {######################}</span><br><span class="line">    {### END PAGE BLOCK ###}</span><br><span class="line">    {######################}</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">{% endblock %}</span><br><span class="line"></span><br><span class="line">{% block sidebar %}</span><br><span class="line">  {{ sidebar_template.render(true) }}</span><br><span class="line">{% endblock %}</span><br></pre></td></tr></tbody></table></figure><h3 id="新建page界面">新建page界面</h3><p>新建名为links的page，具体可以参考我的另外一篇博客<a href="%5Bhttps://lisijian.cn/2020/08/08/2020-08-08-hexo%E6%96%B0%E5%BB%BApage/%5D(https://lisijian.cn/2020/08/08/2020-08-08-hexo新建page/)">2020-08-08-hexo新建page</a></p><p>注意： 在<code>links</code> 文件夹，打开其中的 <code>index.md</code> 文件，在标题头中写入 <code>type = "links"</code> 这个属性头，如下：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">友情链接</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-10</span> <span class="number">13</span><span class="string">:08:43</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"links"</span></span><br></pre></td></tr></tbody></table></figure><h3 id="修改主题配置文件">修改主题配置文件</h3><p>在主题配置文件 <code>~/themes/next/_config.yml</code> 文件中按照以下格式添加友链：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mylinks:</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">nickname:</span> <span class="comment"># 昵称</span></span><br><span class="line">    <span class="attr">avatar:</span> <span class="comment"># 头像地址</span></span><br><span class="line">    <span class="attr">site:</span> <span class="comment">#友链地址</span></span><br><span class="line">    <span class="attr">info:</span> <span class="comment">#相关说明</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">nickname:</span> <span class="comment"># 昵称</span></span><br><span class="line">    <span class="attr">avatar:</span> <span class="comment"># 头像地址</span></span><br><span class="line">    <span class="attr">site:</span> <span class="comment">#友链地址</span></span><br><span class="line">    <span class="attr">info:</span> <span class="comment">#相关说明</span></span><br></pre></td></tr></tbody></table></figure><h3 id="参考">参考</h3><blockquote><p>Hexo-NexT 主题个性优化 https://guanqr.com/tech/website/hexo-theme-next-customization/</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      在新页面添加友链
    
    </summary>
    
    
      <category term="next" scheme="http://yoursite.com/categories/next/"/>
    
    
      <category term="next" scheme="http://yoursite.com/tags/next/"/>
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>2020-08-11-杂记</title>
    <link href="http://yoursite.com/2020/08/11/2020-08-11-%E6%9D%82%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/08/11/2020-08-11-%E6%9D%82%E8%AE%B0/</id>
    <published>2020-08-11T01:20:00.000Z</published>
    <updated>2020-08-11T09:43:45.828Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="60538e9416c404b4b7457c2693fcb1c80ad4730351f64da5488d3b397a8b1058">b2636caa15154e7869096a6b870b46d4f9822c1e031b2d83b47c9c2cc6713956b74f0bf410c1d2c65843fb3c558f4afedd38e18d2f3ac178a01e97d68d8064885dd59d51fff996e09068e1a036158bcc6c3fe8b8fdf67083ddc8c4f595e9d6e8ed0a8ec2db6d74cc502e5071431c9be605cc093e4db8411eff873f63eb41f80ea803e12db33955033004441a9abd8820ddf306abfb79a99592a22f53964c9315ed223ed01005a3f81225eedda0e6e499388623037cd44645f87eb63ca01343c645b39e915e16281248b499092c688da74afe2935123576adad39ed6dba05d7da2faa5e1bf2762b8ba5c54cf70c808451d47fa9be8345594ce669e784c20c90bbc5c559c541d8ef9a27ce02db76b9e381dcc6ac1ff513a06b2d5872f5c716fb7f5d86363d3f475d28a81858b32df00fa15d6cfac6299ea1b3febc4eacd17147a307e9b90c94860f56389366d4f9609a68e8c876ec767a4eb7205bd25a773709320eab3787e03723c41cc1a2bfda9a969ac88dc8d205dd9c159f06be3b075d7d751912735a72d3e757b4e02b7f9092da5bec29216c989caf2b9a2c191bdccbf5228d86a6ec4926c5078cb62aae6458f16dea8617eb6cbd27d4d4cf04ab010045425128a33e092a052e984ce0763f91d3c070e5e784a45d0b56709659b7d7b73bb297498456207f4850aece54a967984fd2e196ab8cac1446e757d1def14d4b63afa3adbe86c8f9053b8d1610505c9c5f23c7d11ff4bbc0f9a77fbfa17b1d997f882ea3ab2946d5e144749e671eb7f4acdd07ea06b5c562ad14efcee487b016efd0df4ec1f00ccbfb74dd3f8d84b35d319b2fe560563b22eac16e69ad27434c71f6a1e4eb7b83ab19be1b76d2e0378d0330f98d4093e7f2cd2d2c29414ecbd578bd8221210b0b9eebedaf19904bebd5f7ba83f4144f60ec20b599aaec7bb43597536716d88e2a057f9bcb84e12a944031cc</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      记录日常
    
    </summary>
    
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="杂记" scheme="http://yoursite.com/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2020-08-09-常用chrome快捷键</title>
    <link href="http://yoursite.com/2020/08/09/2020-08-09-%E5%B8%B8%E7%94%A8chrome%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://yoursite.com/2020/08/09/2020-08-09-%E5%B8%B8%E7%94%A8chrome%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2020-08-09T06:43:06.000Z</published>
    <updated>2020-08-24T11:27:15.739Z</updated>
    
    <content type="html"><![CDATA[<p>chrome是我日常使用的浏览器，平时也会使用快捷键来提高效率。chrome的快捷键真的很好使，可以</p><p>摆脱很多不必要的鼠标点击，键盘直接搞定。总结一下我常用的快捷键。</p><table><thead><tr class="header"><th style="text-align: center;">描述</th><th style="text-align: center;">快捷键</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">打开新窗口</td><td style="text-align: center;">Ctrl + n</td></tr><tr class="even"><td style="text-align: center;">在隐身模式下打开新窗口</td><td style="text-align: center;">Ctrl + Shift + n</td></tr><tr class="odd"><td style="text-align: center;">-----</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">打开新的标签页，并跳转到该标签页</td><td style="text-align: center;">Ctrl + t</td></tr><tr class="odd"><td style="text-align: center;">恢复已关闭的标签页</td><td style="text-align: center;">Ctrl + Shift + t</td></tr><tr class="even"><td style="text-align: center;">跳转到下一个标签页</td><td style="text-align: center;">Ctrl + Tab</td></tr><tr class="odd"><td style="text-align: center;">跳转到上一个标签页</td><td style="text-align: center;">Ctrl + Shift + Tab</td></tr><tr class="even"><td style="text-align: center;">关闭当前标签页</td><td style="text-align: center;">Ctrl + w</td></tr><tr class="odd"><td style="text-align: center;">------</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">打开当前标签页浏览记录中的上一个页面</td><td style="text-align: center;">alt ＋左箭头</td></tr><tr class="odd"><td style="text-align: center;">打开当前标签页浏览记录中的下一个页面</td><td style="text-align: center;">alt ＋右箭头</td></tr><tr class="even"><td style="text-align: center;">------</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">保存当前标签页为书签</td><td style="text-align: center;">Ctrl + d</td></tr><tr class="even"><td style="text-align: center;">将所有打开的标签页以书签的形式保存在新文件夹中</td><td style="text-align: center;">Ctrl + Shift + d</td></tr><tr class="odd"><td style="text-align: center;">------</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">跳转到与查找栏中搜索字词相匹配的下一条内容</td><td style="text-align: center;">Ctrl + g</td></tr><tr class="odd"><td style="text-align: center;">跳转到与查找栏中搜索字词相匹配的上一条内容</td><td style="text-align: center;">Ctrl + Shift + g</td></tr><tr class="even"><td style="text-align: center;">浏览下一个可点击项</td><td style="text-align: center;">Tab</td></tr><tr class="odd"><td style="text-align: center;">浏览上一个可点击项</td><td style="text-align: center;">Shift + Tab</td></tr><tr class="even"><td style="text-align: center;">选中浏览器地址栏</td><td style="text-align: center;">ctrl+L</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      记录常用chrome快捷键
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="chrome" scheme="http://yoursite.com/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>2020-08-08-hexo新建page</title>
    <link href="http://yoursite.com/2020/08/08/2020-08-08-hexo%E6%96%B0%E5%BB%BApage/"/>
    <id>http://yoursite.com/2020/08/08/2020-08-08-hexo%E6%96%B0%E5%BB%BApage/</id>
    <published>2020-08-08T11:10:50.000Z</published>
    <updated>2020-08-12T10:39:49.750Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>在博客中需要一些个性化设置，添加一些page等 ，记录下我的操作</p><h3 id="添加page-界面">添加page 界面</h3><p>我想要添加一个“一句话感想”的page，于是可以这样操作</p><p>step 1.hexo新建新的page界面</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page onesentence  <span class="comment"># onesentence 是新建page的名称 （最好是英文名）</span></span><br></pre></td></tr></tbody></table></figure><p>这时候在博客的source文件夹里会有一个onesentence的文件夹，并且里面生成了一个index.md文件，用于写一句话感想的内容</p><p>step 2.在主题的配置文件 _config.yml 文件中的 menu 中进行匹配，如下图，添加一个onesentence项，<code>/onesentence</code>表示挂接到上述的新建文件夹里，</p><p>在这里也可以设置图标，在fontawesome网站里找，我找了一个保龄球<span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f3b3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b3.png?v8">🎳</span>的图标，和page主题没啥联系，就是看着顺眼 <span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span></p><p>此时<code>hexo s -g</code> 就可以看到已经有了这个界面，不过是英文的文件名，所以此时还要设置一下此文件名的中文名映射</p><p><img src="https://i.loli.net/2020/08/08/jiUOEvuzWnT7Kmp.png" alt="image-20200808192748174"></p><p>step 3. 打开**themes*，我用的是zh-CN，打开此文件，在menu下添加<code>onesentence: 一句话</code>，即可完成中文映射，</p><p>此时 hexo s -g ,就可以在本地服务器的侧边栏部分看到新添加的“一句话”page</p><p><img src="https://i.loli.net/2020/08/08/cCymB2KXMh1OPN5.png" alt="image-20200808193652117"></p><p><img src="https://i.loli.net/2020/08/08/ZrQkcR8IPspHMdi.png" alt="image-20200808194045722" style="zoom: 67%;"></p><p>step 4. 编辑“一句话”页面下的md文件，部署就能看到内容</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      新建page页
    
    </summary>
    
    
      <category term="next" scheme="http://yoursite.com/categories/next/"/>
    
    
      <category term="next" scheme="http://yoursite.com/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>2020-08-08-next缺少custom.styl的问题</title>
    <link href="http://yoursite.com/2020/08/08/2020-08-08-%E7%BC%BA%E5%B0%91custom-styl%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/08/08/2020-08-08-%E7%BC%BA%E5%B0%91custom-styl%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-08-08T10:56:09.000Z</published>
    <updated>2020-08-10T07:20:00.982Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>在 next7.x 版本中没有custom.styl文件。如果我们想要在博客中添加自己的css样式，可以在此文件中添加，下面介绍一下</p><h3 id="操作">操作</h3><p>step1 ：添加custom.styl文件</p><p>文件路径：<code>~\themes\next\source\css</code> ,添加<code>_custom</code>文件夹。然后在<code>_custom</code>中创建<code>custom.styl</code>文件。我们自己的样式就可以在此文件中添加</p><p>step2： 添加引用</p><p>在<code>~\themes\next\source\css</code>中的<code>main.styl</code>文件末尾加入引用即可</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//My Layer</span><br><span class="line">@import "_custom/custom.styl";</span><br></pre></td></tr></tbody></table></figure><p>step3： 添加样式</p><p>用vscode打开<code>custom.styl</code>，博客背景以及前页的不透明度等等，就可以更换样式了。</p><p>对于网页的组件，F12打开调试界面，就可以知道每个组件的名称等信息，便于更改样式</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      next7.x 版本没有custom.styl文件
    
    </summary>
    
    
      <category term="next" scheme="http://yoursite.com/categories/next/"/>
    
    
      <category term="故障排除" scheme="http://yoursite.com/tags/%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4/"/>
    
      <category term="next" scheme="http://yoursite.com/tags/next/"/>
    
  </entry>
  
</feed>
